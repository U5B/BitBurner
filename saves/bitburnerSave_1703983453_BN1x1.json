{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":274,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":772330.7543958862,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.228477535199574,\"hacking_speed\":1.173307725891521,\"hacking_money\":1.11679775927234,\"hacking_grow\":1.11679775927234,\"hacking\":1.1726376472359568,\"hacking_exp\":1.375894839423523,\"strength\":1.11679775927234,\"strength_exp\":1.228477535199574,\"defense\":1.11679775927234,\"defense_exp\":1.228477535199574,\"dexterity\":1.5478816943514635,\"dexterity_exp\":1.228477535199574,\"agility\":1.172637647235957,\"agility_exp\":1.228477535199574,\"charisma\":1.340157311126808,\"charisma_exp\":1.228477535199574,\"hacknet_node_money\":2.8166686486747725,\"hacknet_node_purchase_cost\":0.6849935260422104,\"hacknet_node_ram_cost\":0.8954163739113861,\"hacknet_node_core_cost\":0.8954163739113861,\"hacknet_node_level_cost\":0.761103917824678,\"company_rep\":1.11679775927234,\"faction_rep\":1.11679775927234,\"work_money\":1.11679775927234,\"crime_success\":1.11679775927234,\"crime_money\":1.11679775927234,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":12,\"name\":\"NeuroFlux Governor\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":14,\"name\":\"NeuroFlux Governor\"},{\"level\":15,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[\"Sector-12\"],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[]},\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98376.80000002243,\"ram\":64,\"totalMoneyGenerated\":2310646152.81734,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98367.40000002256,\"ram\":64,\"totalMoneyGenerated\":2299540503.6950073,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98367.40000002256,\"ram\":64,\"totalMoneyGenerated\":2293105331.4675813,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98367.40000002256,\"ram\":64,\"totalMoneyGenerated\":2288161752.134445,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98367.40000002256,\"ram\":64,\"totalMoneyGenerated\":2284068616.5904455,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98367.20000002257,\"ram\":64,\"totalMoneyGenerated\":2280527914.5637703,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98367.20000002257,\"ram\":64,\"totalMoneyGenerated\":2277372840.342927,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98367.20000002257,\"ram\":64,\"totalMoneyGenerated\":2274506917.860571,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98367.20000002257,\"ram\":64,\"totalMoneyGenerated\":2271862567.6532116,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98366.80000002257,\"ram\":64,\"totalMoneyGenerated\":2269393073.702666,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":98365.80000002259,\"ram\":64,\"totalMoneyGenerated\":2267070738.1893187,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":96506.40000004965,\"ram\":64,\"totalMoneyGenerated\":2264204769.186105,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":96139.60000005498,\"ram\":64,\"totalMoneyGenerated\":2261604076.7217436,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":95789.20000006008,\"ram\":64,\"totalMoneyGenerated\":2259464034.3952885,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":95068.40000007051,\"ram\":64,\"totalMoneyGenerated\":2257185263.729676,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":89850.60000006438,\"ram\":64,\"totalMoneyGenerated\":2246086807.6222477,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":89043.20000006145,\"ram\":64,\"totalMoneyGenerated\":2234356721.7886586,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":87084.80000005433,\"ram\":64,\"totalMoneyGenerated\":2201518743.015223,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":85971.40000005029,\"ram\":64,\"totalMoneyGenerated\":2179983928.2564306,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":82894.60000003909,\"ram\":64,\"totalMoneyGenerated\":2116056934.7698627,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":77041.60000001779,\"ram\":64,\"totalMoneyGenerated\":1980945295.267236,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":71718.39999999842,\"ram\":64,\"totalMoneyGenerated\":1848847104.6131616,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":70164.99999999278,\"ram\":64,\"totalMoneyGenerated\":1808884255.0468588,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25832.539126637737,\"onlineTimeSeconds\":67958.59999999308,\"ram\":64,\"totalMoneyGenerated\":1752298857.1234791,\"name\":\"hacknet-node-23\"}}],\"has4SData\":true,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":-1197.187500000019,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":9875200414.21368,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":160131282.1971321,\"hacknet\":52527693201.27292,\"hacknet_expenses\":-10772028686.975775,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":9874200414.213741,\"work\":0,\"servers\":-1408000000,\"other\":-310200000,\"augmentations\":-30323395381.6121}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-9476064,\"codingcontract\":0,\"corporation\":0,\"crime\":34498000,\"gang\":0,\"hacking\":586910716.2321122,\"hacknet\":128767752358.22336,\"hacknet_expenses\":-30904621277.92256,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-6200000000,\"total\":13314640470.821918,\"work\":0,\"servers\":-14969124276.312332,\"other\":-5624800000,\"augmentations\":-58366498969.825775}},\"playtimeSinceLastAug\":98526800,\"playtimeSinceLastBitnode\":418780000,\"lastAugReset\":1703884925450,\"lastNodeReset\":-1,\"purchasedServers\":[\"botnet-0\",\"botnet-1\",\"botnet-2\",\"botnet-3\",\"botnet-4\",\"botnet-5\",\"botnet-6\",\"botnet-7\",\"botnet-8\",\"botnet-9\",\"botnet-10\",\"botnet-11\",\"botnet-12\",\"botnet-13\",\"botnet-14\",\"botnet-15\",\"botnet-16\",\"botnet-17\",\"botnet-18\",\"botnet-19\",\"botnet-20\",\"botnet-21\",\"botnet-22\",\"botnet-23\",\"botnet-24\"],\"scriptProdSinceLastAug\":71287383.15893689,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[\"UndocumentedFunctionCall\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1703564862488},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1703564982482},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1703615082481},{\"ID\":\"FROZE\",\"unlockedOn\":1703616879900},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1703632059893},{\"ID\":\"TRAVEL\",\"unlockedOn\":1703643263307},{\"ID\":\"TOR\",\"unlockedOn\":1703643443307},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1703648809541},{\"ID\":\"WORKOUT\",\"unlockedOn\":1703648989545},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1703655889546},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1703662612919},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1703717338719},{\"ID\":\"NITESEC\",\"unlockedOn\":1703748358721},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1703748658714},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1703833723926},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1703833723928},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1703833723930},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1703833723931},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1703840118274},{\"ID\":\"4S\",\"unlockedOn\":1703884970709}],\"terminalCommandHistory\":[\"home\",\"run template.js\",\"buy -l\",\"buy relaySMTP.exe\",\"buy HTTPWorm.exe \",\"buy SQLInject.exe \",\"connect sigma-cosmetics \",\"ls\",\"scan\",\"home\",\"scan-analyze 3\",\"ls\",\"backdoor\",\"analyze\",\"home\",\"run print\",\"run print.js\",\"run master.js\",\"run print.js\",\"run print.jsr\",\"run master.js\",\"run print.js\",\"run master.js\",\"run print.js\",\"scan\",\"run print.js\",\"scan-analyze 5\",\"scan-analyze 3\",\"backdoor\",\"home\",\"scan-analyze 3\",\"backdoor\",\"home\",\"scan-analyze 3\",\"backdoor\",\"home\",\"connect n00dles; connect CSEC\",\"home\",\"run purchaseServer.js\",\"run master.js false true\",\"run purchaseServer.js\",\"connect darkweb\",\"buy -l\",\"buy deepscanv2.exe\",\"home\",\"scan-analyze 10\",\"run master.js false true\",\"run node.js\",\"run print.js\",\"scan-analyze 10\"],\"lastUpdate\":1703983452425,\"lastSave\":1703983403225,\"totalPlaytime\":418780000,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":314632,\"factionWorkType\":\"hacking\",\"factionName\":\"NiteSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"11b3338993aaaf\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"90.2.2.5\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"AutoLink.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"home\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"home\"}}],[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tprint('Hello Remote API!');\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxFQUFFLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7QUFDaEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLnRwcmludCgnSGVsbG8gUmVtb3RlIEFQSSEnKVxufVxuIl19\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"node.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tail();\\r\\n    const nodes = [];\\r\\n    while (true) {\\r\\n        await ns.asleep(50);\\r\\n        const hacknet = ns.hacknet;\\r\\n        for (let i = 0; i < hacknet.numNodes(); i++) {\\r\\n            nodes[i] = [0, 'help'];\\r\\n            const node = hacknet.getNodeStats(i);\\r\\n            const baseRate = calcRateBase(node);\\r\\n            const lvlEff = (calcRateLevel(node) - baseRate) / hacknet.getLevelUpgradeCost(i);\\r\\n            const ramEff = (calcRateRam(node) - baseRate) / hacknet.getRamUpgradeCost(i);\\r\\n            const coreEff = (calcRateCores(node) - baseRate) / hacknet.getCoreUpgradeCost(i);\\r\\n            if (lvlEff > ramEff && lvlEff > coreEff) {\\r\\n                nodes[i] = [lvlEff, 'lvl'];\\r\\n            }\\r\\n            else if (ramEff > lvlEff && ramEff > coreEff) {\\r\\n                nodes[i] = [ramEff, 'ram'];\\r\\n            }\\r\\n            else {\\r\\n                nodes[i] = [coreEff, 'cores'];\\r\\n            }\\r\\n        }\\r\\n        const maxEff = [];\\r\\n        for (let j = 0; j < nodes.length; j++) {\\r\\n            maxEff[j] = nodes[j][0];\\r\\n        }\\r\\n        const index = maxEff.indexOf(Math.max(...maxEff));\\r\\n        const money = ns.getServerMoneyAvailable('home');\\r\\n        if (index !== -1) {\\r\\n            const upgrade = nodes[index][1];\\r\\n            switch (upgrade) {\\r\\n                case 'lvl': {\\r\\n                    if (money / 2 >= hacknet.getLevelUpgradeCost(index))\\r\\n                        hacknet.upgradeLevel(index);\\r\\n                    break;\\r\\n                }\\r\\n                case 'ram': {\\r\\n                    if (money / 2 >= hacknet.getRamUpgradeCost(index))\\r\\n                        hacknet.upgradeRam(index);\\r\\n                    break;\\r\\n                }\\r\\n                case 'cores': {\\r\\n                    if (money / 2 >= hacknet.getCoreUpgradeCost(index))\\r\\n                        hacknet.upgradeCore(index);\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        let sumMoney = 0;\\r\\n        for (let k = 0; k < hacknet.numNodes(); k++) {\\r\\n            sumMoney += hacknet.getNodeStats(k).production;\\r\\n        }\\r\\n        const purchaseCost = hacknet.getPurchaseNodeCost();\\r\\n        if (purchaseCost <= money && (sumMoney * 1800) >= purchaseCost && hacknet.numNodes() > 0 && hacknet.numNodes() < hacknet.maxNumNodes()) {\\r\\n            hacknet.purchaseNode();\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction calcRateBase(nodeStats) {\\r\\n    return 1.2094 * nodeStats.level * (1 + 0.2 * nodeStats.cores) * (Math.exp(nodeStats.ram * 0.034375));\\r\\n}\\r\\n// upgrade level by 1\\r\\nfunction calcRateLevel(nodeStats) {\\r\\n    return 1.2094 * Math.min((nodeStats.level + 1), 200) * (1 + 0.2 * nodeStats.cores) * (Math.exp(nodeStats.ram * 0.034375));\\r\\n}\\r\\n// upgrade ram by 1\\r\\nfunction calcRateRam(nodeStats) {\\r\\n    return 1.2094 * nodeStats.level * (1 + 0.2 * nodeStats.cores) * (Math.exp(Math.min((nodeStats.ram * 2), 64) * 0.034375));\\r\\n}\\r\\n// upgrade cores by 1\\r\\nfunction calcRateCores(nodeStats) {\\r\\n    return 1.2094 * nodeStats.level * (1 + 0.2 * Math.min((nodeStats.cores + 1), 16)) * (Math.exp(nodeStats.ram * 0.034375));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ1QsTUFBTSxLQUFLLEdBQTRCLEVBQUUsQ0FBQTtJQUN6QyxPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNuQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFBO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1lBQ3RCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDcEMsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ25DLE1BQU0sTUFBTSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNoRixNQUFNLE1BQU0sR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDNUUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2hGLElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxNQUFNLEdBQUcsT0FBTyxFQUFFO2dCQUN2QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7YUFDM0I7aUJBQU0sSUFBSSxNQUFNLEdBQUcsTUFBTSxJQUFJLE1BQU0sR0FBRyxPQUFPLEVBQUU7Z0JBQzlDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTthQUMzQjtpQkFBTTtnQkFDTCxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7YUFDOUI7U0FDRjtRQUNELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQTtRQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3hCO1FBQ0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQTtRQUNqRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDaEQsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDaEIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQy9CLFFBQVEsT0FBTyxFQUFFO2dCQUNmLEtBQUssS0FBSyxDQUFDLENBQUM7b0JBQ1YsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7d0JBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTtvQkFDaEYsTUFBSztpQkFDTjtnQkFDRCxLQUFLLEtBQUssQ0FBQyxDQUFDO29CQUNWLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDO3dCQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7b0JBQzVFLE1BQUs7aUJBQ047Z0JBQ0QsS0FBSyxPQUFPLENBQUMsQ0FBQztvQkFDWixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQzt3QkFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO29CQUM5RSxNQUFLO2lCQUNOO2FBQ0Y7U0FDRjtRQUNELElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQTtRQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNDLFFBQVEsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQTtTQUMvQztRQUNELE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxDQUFBO1FBQ2xELElBQUksWUFBWSxJQUFJLEtBQUssSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxZQUFZLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3RJLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQTtTQUN2QjtLQUNGO0FBQ0gsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFFLFNBQW9CO0lBQ3pDLE9BQU8sTUFBTSxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFBO0FBQ3RHLENBQUM7QUFDRCxxQkFBcUI7QUFDckIsU0FBUyxhQUFhLENBQUUsU0FBb0I7SUFDMUMsT0FBTyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFBO0FBQzNILENBQUM7QUFDRCxtQkFBbUI7QUFDbkIsU0FBUyxXQUFXLENBQUUsU0FBb0I7SUFDeEMsT0FBTyxNQUFNLEdBQUcsU0FBUyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFBO0FBQzFILENBQUM7QUFDRCxxQkFBcUI7QUFDckIsU0FBUyxhQUFhLENBQUUsU0FBb0I7SUFDMUMsT0FBTyxNQUFNLEdBQUcsU0FBUyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFBO0FBQzFILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUywgTm9kZVN0YXRzIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLnRhaWwoKVxyXG4gIGNvbnN0IG5vZGVzOiBBcnJheTxbbnVtYmVyLCBzdHJpbmddPiA9IFtdXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGF3YWl0IG5zLmFzbGVlcCg1MClcclxuICAgIGNvbnN0IGhhY2tuZXQgPSBucy5oYWNrbmV0XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhhY2tuZXQubnVtTm9kZXMoKTsgaSsrKSB7XHJcbiAgICAgIG5vZGVzW2ldID0gWzAsICdoZWxwJ11cclxuICAgICAgY29uc3Qgbm9kZSA9IGhhY2tuZXQuZ2V0Tm9kZVN0YXRzKGkpXHJcbiAgICAgIGNvbnN0IGJhc2VSYXRlID0gY2FsY1JhdGVCYXNlKG5vZGUpXHJcbiAgICAgIGNvbnN0IGx2bEVmZiA9IChjYWxjUmF0ZUxldmVsKG5vZGUpIC0gYmFzZVJhdGUpIC8gaGFja25ldC5nZXRMZXZlbFVwZ3JhZGVDb3N0KGkpXHJcbiAgICAgIGNvbnN0IHJhbUVmZiA9IChjYWxjUmF0ZVJhbShub2RlKSAtIGJhc2VSYXRlKSAvIGhhY2tuZXQuZ2V0UmFtVXBncmFkZUNvc3QoaSlcclxuICAgICAgY29uc3QgY29yZUVmZiA9IChjYWxjUmF0ZUNvcmVzKG5vZGUpIC0gYmFzZVJhdGUpIC8gaGFja25ldC5nZXRDb3JlVXBncmFkZUNvc3QoaSlcclxuICAgICAgaWYgKGx2bEVmZiA+IHJhbUVmZiAmJiBsdmxFZmYgPiBjb3JlRWZmKSB7XHJcbiAgICAgICAgbm9kZXNbaV0gPSBbbHZsRWZmLCAnbHZsJ11cclxuICAgICAgfSBlbHNlIGlmIChyYW1FZmYgPiBsdmxFZmYgJiYgcmFtRWZmID4gY29yZUVmZikge1xyXG4gICAgICAgIG5vZGVzW2ldID0gW3JhbUVmZiwgJ3JhbSddXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbm9kZXNbaV0gPSBbY29yZUVmZiwgJ2NvcmVzJ11cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgbWF4RWZmID0gW11cclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgbWF4RWZmW2pdID0gbm9kZXNbal1bMF1cclxuICAgIH1cclxuICAgIGNvbnN0IGluZGV4ID0gbWF4RWZmLmluZGV4T2YoTWF0aC5tYXgoLi4ubWF4RWZmKSlcclxuICAgIGNvbnN0IG1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKVxyXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICBjb25zdCB1cGdyYWRlID0gbm9kZXNbaW5kZXhdWzFdXHJcbiAgICAgIHN3aXRjaCAodXBncmFkZSkge1xyXG4gICAgICAgIGNhc2UgJ2x2bCc6IHtcclxuICAgICAgICAgIGlmIChtb25leSAvIDIgPj0gaGFja25ldC5nZXRMZXZlbFVwZ3JhZGVDb3N0KGluZGV4KSkgaGFja25ldC51cGdyYWRlTGV2ZWwoaW5kZXgpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlICdyYW0nOiB7XHJcbiAgICAgICAgICBpZiAobW9uZXkgLyAyID49IGhhY2tuZXQuZ2V0UmFtVXBncmFkZUNvc3QoaW5kZXgpKSBoYWNrbmV0LnVwZ3JhZGVSYW0oaW5kZXgpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlICdjb3Jlcyc6IHtcclxuICAgICAgICAgIGlmIChtb25leSAvIDIgPj0gaGFja25ldC5nZXRDb3JlVXBncmFkZUNvc3QoaW5kZXgpKSBoYWNrbmV0LnVwZ3JhZGVDb3JlKGluZGV4KVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBzdW1Nb25leSA9IDBcclxuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgaGFja25ldC5udW1Ob2RlcygpOyBrKyspIHtcclxuICAgICAgc3VtTW9uZXkgKz0gaGFja25ldC5nZXROb2RlU3RhdHMoaykucHJvZHVjdGlvblxyXG4gICAgfVxyXG4gICAgY29uc3QgcHVyY2hhc2VDb3N0ID0gaGFja25ldC5nZXRQdXJjaGFzZU5vZGVDb3N0KClcclxuICAgIGlmIChwdXJjaGFzZUNvc3QgPD0gbW9uZXkgJiYgKHN1bU1vbmV5ICogMTgwMCkgPj0gcHVyY2hhc2VDb3N0ICYmIGhhY2tuZXQubnVtTm9kZXMoKSA+IDAgJiYgaGFja25ldC5udW1Ob2RlcygpIDwgaGFja25ldC5tYXhOdW1Ob2RlcygpKSB7XHJcbiAgICAgIGhhY2tuZXQucHVyY2hhc2VOb2RlKClcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNSYXRlQmFzZSAobm9kZVN0YXRzOiBOb2RlU3RhdHMpOiBudW1iZXIge1xyXG4gIHJldHVybiAxLjIwOTQgKiBub2RlU3RhdHMubGV2ZWwgKiAoMSArIDAuMiAqIG5vZGVTdGF0cy5jb3JlcykgKiAoTWF0aC5leHAobm9kZVN0YXRzLnJhbSAqIDAuMDM0Mzc1KSlcclxufVxyXG4vLyB1cGdyYWRlIGxldmVsIGJ5IDFcclxuZnVuY3Rpb24gY2FsY1JhdGVMZXZlbCAobm9kZVN0YXRzOiBOb2RlU3RhdHMpOiBudW1iZXIge1xyXG4gIHJldHVybiAxLjIwOTQgKiBNYXRoLm1pbigobm9kZVN0YXRzLmxldmVsICsgMSksIDIwMCkgKiAoMSArIDAuMiAqIG5vZGVTdGF0cy5jb3JlcykgKiAoTWF0aC5leHAobm9kZVN0YXRzLnJhbSAqIDAuMDM0Mzc1KSlcclxufVxyXG4vLyB1cGdyYWRlIHJhbSBieSAxXHJcbmZ1bmN0aW9uIGNhbGNSYXRlUmFtIChub2RlU3RhdHM6IE5vZGVTdGF0cyk6IG51bWJlciB7XHJcbiAgcmV0dXJuIDEuMjA5NCAqIG5vZGVTdGF0cy5sZXZlbCAqICgxICsgMC4yICogbm9kZVN0YXRzLmNvcmVzKSAqIChNYXRoLmV4cChNYXRoLm1pbigobm9kZVN0YXRzLnJhbSAqIDIpLCA2NCkgKiAwLjAzNDM3NSkpXHJcbn1cclxuLy8gdXBncmFkZSBjb3JlcyBieSAxXHJcbmZ1bmN0aW9uIGNhbGNSYXRlQ29yZXMgKG5vZGVTdGF0czogTm9kZVN0YXRzKTogbnVtYmVyIHtcclxuICByZXR1cm4gMS4yMDk0ICogbm9kZVN0YXRzLmxldmVsICogKDEgKyAwLjIgKiBNYXRoLm1pbigobm9kZVN0YXRzLmNvcmVzICsgMSksIDE2KSkgKiAoTWF0aC5leHAobm9kZVN0YXRzLnJhbSAqIDAuMDM0Mzc1KSlcclxufVxyXG4iXX0=\",\"filename\":\"node.js\",\"server\":\"home\"}}],[\"master.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { name as purchasedServerName } from './purchaseServer';\\r\\nexport let servers = {};\\r\\nexport const constants = {\\r\\n    hasSSH: false,\\r\\n    hasFTP: false,\\r\\n    hasSMTP: false,\\r\\n    hasHTTP: false,\\r\\n    hasSQL: false,\\r\\n    lvl: 0\\r\\n};\\r\\nexport let moneyServers = [];\\r\\nlet refreshServers = true;\\r\\nlet runUpdateTask = true;\\r\\nlet lastUpdateTime = 0;\\r\\nlet useSharesOnly = false;\\r\\nfunction refreshVariables(ns) {\\r\\n    if (Date.now() - lastUpdateTime < 100)\\r\\n        return;\\r\\n    lastUpdateTime = Date.now();\\r\\n    if (refreshServers) {\\r\\n        servers = {};\\r\\n        moneyServers = [];\\r\\n        refreshServers = false;\\r\\n    }\\r\\n    refreshHosts(ns);\\r\\n    refreshHostVariables(ns);\\r\\n    sortServersByMoney(ns);\\r\\n    constants.hasSSH = ns.fileExists('brutessh.exe', 'home');\\r\\n    constants.hasFTP = ns.fileExists('ftpcrack.exe', 'home');\\r\\n    constants.hasSMTP = ns.fileExists('relaysmtp.exe', 'home');\\r\\n    constants.hasHTTP = ns.fileExists('httpworm.exe', 'home');\\r\\n    constants.hasSQL = ns.fileExists('sqlinject.exe', 'home');\\r\\n    constants.lvl = ns.getHackingLevel();\\r\\n}\\r\\nexport function numPorts() {\\r\\n    let ports = 0;\\r\\n    if (constants.hasSQL)\\r\\n        ports++;\\r\\n    if (constants.hasHTTP)\\r\\n        ports++;\\r\\n    if (constants.hasSMTP)\\r\\n        ports++;\\r\\n    if (constants.hasFTP)\\r\\n        ports++;\\r\\n    if (constants.hasSSH)\\r\\n        ports++;\\r\\n    return ports;\\r\\n}\\r\\nfunction sortServersByMoney(ns) {\\r\\n    const newMoneyServers = [];\\r\\n    for (const s of Object.entries(servers)) {\\r\\n        const host = s[0];\\r\\n        const server = s[1];\\r\\n        if (server.purchased)\\r\\n            continue;\\r\\n        if (server.hackLvl <= constants.lvl && server.root && server.ports <= numPorts()) {\\r\\n            newMoneyServers.push({ host, money: server.maxMoney });\\r\\n        }\\r\\n    }\\r\\n    newMoneyServers.sort((a, b) => b.money - a.money);\\r\\n    moneyServers = newMoneyServers;\\r\\n}\\r\\nfunction refreshHostVariables(ns) {\\r\\n    for (const host of Object.keys(servers)) {\\r\\n        servers[host].root = ns.hasRootAccess(host);\\r\\n        servers[host].ram.used = ns.getServerUsedRam(host);\\r\\n        servers[host].ready = ns.getServerUsedRam(host) === 0;\\r\\n        servers[host].scripts = ns.ps(host);\\r\\n        servers[host].files = ns.ls(host);\\r\\n    }\\r\\n}\\r\\nexport function refreshHosts(ns, hostname = 'home') {\\r\\n    const hosts = ns.scan(hostname);\\r\\n    if (servers[hostname] == null && hostname === 'home') {\\r\\n        servers.home = {\\r\\n            parent: ':3',\\r\\n            children: hosts,\\r\\n            home: true,\\r\\n            purchased: true,\\r\\n            hackLvl: ns.getServerRequiredHackingLevel(hostname),\\r\\n            maxMoney: ns.getServerMaxMoney(hostname),\\r\\n            root: ns.hasRootAccess(hostname),\\r\\n            ram: {\\r\\n                max: ns.getServerMaxRam(hostname),\\r\\n                used: ns.getServerUsedRam(hostname)\\r\\n            },\\r\\n            ports: ns.getServerNumPortsRequired(hostname),\\r\\n            minSecurityLvl: ns.getServerMinSecurityLevel(hostname),\\r\\n            ready: ns.getServerUsedRam(hostname) === 0,\\r\\n            scripts: ns.ps(hostname),\\r\\n            files: ns.ls(hostname)\\r\\n        };\\r\\n    }\\r\\n    for (const host of hosts) {\\r\\n        if (servers[host] == null) {\\r\\n            servers[host] = {\\r\\n                parent: hostname,\\r\\n                children: hosts,\\r\\n                home: false,\\r\\n                purchased: host.startsWith(purchasedServerName),\\r\\n                hackLvl: ns.getServerRequiredHackingLevel(hostname),\\r\\n                maxMoney: ns.getServerMaxMoney(hostname),\\r\\n                root: ns.hasRootAccess(hostname),\\r\\n                ram: {\\r\\n                    max: ns.getServerMaxRam(hostname),\\r\\n                    used: ns.getServerUsedRam(hostname)\\r\\n                },\\r\\n                ports: ns.getServerNumPortsRequired(hostname),\\r\\n                minSecurityLvl: ns.getServerMinSecurityLevel(hostname),\\r\\n                ready: ns.getServerUsedRam(hostname) === 0,\\r\\n                scripts: ns.ps(hostname),\\r\\n                files: ns.ls(hostname)\\r\\n            };\\r\\n        }\\r\\n        if (hostname !== 'home' && host === hosts[0])\\r\\n            continue;\\r\\n        refreshHosts(ns, host);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    ns.tail();\\r\\n    // read stuff on main thread\\r\\n    refreshServers = ns.args[0] ?? false;\\r\\n    useSharesOnly = ns.args[1] ?? false;\\r\\n    refreshVariables(ns);\\r\\n    await ns.asleep(1000);\\r\\n    while (true) {\\r\\n        await readData(ns);\\r\\n        await ns.asleep(1);\\r\\n    }\\r\\n}\\r\\nasync function readData(ns) {\\r\\n    const port = ns.getPortHandle(1);\\r\\n    if (port.empty()) {\\r\\n        if (runUpdateTask) {\\r\\n            await updateServerTasks(ns);\\r\\n            runUpdateTask = false;\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n    const data = port.read();\\r\\n    if (!data.startsWith('$'))\\r\\n        return;\\r\\n    if (scriptDone.test(data)) {\\r\\n        const a = data.match(scriptDone);\\r\\n        if (a == null)\\r\\n            return;\\r\\n        const hostname = a[1];\\r\\n        runUpdateTask = true;\\r\\n        if (servers[hostname] == null)\\r\\n            return;\\r\\n        servers[hostname].ready = true;\\r\\n    }\\r\\n}\\r\\nexport function forceUpdateTask() {\\r\\n    runUpdateTask = true;\\r\\n}\\r\\nasync function updateServerTasks(ns) {\\r\\n    ns.print('Updating server tasks...');\\r\\n    for (const s of Object.entries(servers)) {\\r\\n        const host = s[0];\\r\\n        const server = s[1];\\r\\n        // skip servers like our home server\\r\\n        if (!server.root) {\\r\\n            if (server.ports <= numPorts())\\r\\n                nukeServer(ns, host);\\r\\n            continue;\\r\\n        }\\r\\n        if ( /* !server.ready || */(server.ram.max - server.ram.used) < 2.25)\\r\\n            continue;\\r\\n        // server.ready = false\\r\\n        ns.scp(['_grow.js', '_hack.js', '_weaken.js', '_share.js'], host, 'home'); // update the files\\r\\n        if (useSharesOnly || (server.purchased && server.ram.max >= 256)) {\\r\\n            runScript(ns, host, '_share.js', [host]);\\r\\n            continue;\\r\\n        }\\r\\n        const target = getBestServer();\\r\\n        if (ns.getServerBaseSecurityLevel(host) > servers[target].minSecurityLvl + 10) {\\r\\n            runScript(ns, host, '_weaken.js', [host, target]);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(host) < servers[target].maxMoney * 0.75) {\\r\\n            runScript(ns, host, '_grow.js', [host, target]);\\r\\n        }\\r\\n        else {\\r\\n            runScript(ns, host, '_hack.js', [host, target]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nconst scriptDone = /\\\\$(?<host>.+):done/;\\r\\nfunction getBestServer() {\\r\\n    const ran = Math.floor(Math.random() * Math.min(5, moneyServers.length));\\r\\n    return moneyServers[ran]?.host ?? 'home';\\r\\n}\\r\\nfunction nukeServer(ns, hostname) {\\r\\n    ns.print('WARN Attempting to nuke: ' + hostname);\\r\\n    let ports = 0;\\r\\n    const totalPorts = servers[hostname].ports;\\r\\n    if (constants.hasSQL) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (constants.hasHTTP) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (constants.hasSMTP) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (constants.hasFTP) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (constants.hasSSH) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n    if (ports >= totalPorts) {\\r\\n        ns.nuke(hostname);\\r\\n        ns.print('SUCCESS Nuked: ' + hostname);\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nfunction runScript(ns, hostname, file, args) {\\r\\n    const threads = Math.floor((servers[hostname].ram.max - servers[hostname].ram.used) / ns.getScriptRam(file));\\r\\n    if (threads === 0 || threads == null) {\\r\\n        return 0;\\r\\n    }\\r\\n    if (args.length > 0) {\\r\\n        return ns.exec(file, hostname, threads, ...args);\\r\\n    }\\r\\n    else {\\r\\n        return ns.exec(file, hostname, threads);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsSUFBSSxJQUFJLG1CQUFtQixFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFvQjlELE1BQU0sQ0FBQyxJQUFJLE9BQU8sR0FBK0IsRUFBRSxDQUFBO0FBQ25ELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUN2QixNQUFNLEVBQUUsS0FBSztJQUNiLE1BQU0sRUFBRSxLQUFLO0lBQ2IsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSztJQUNkLE1BQU0sRUFBRSxLQUFLO0lBQ2IsR0FBRyxFQUFFLENBQUM7Q0FDUCxDQUFBO0FBQ0QsTUFBTSxDQUFDLElBQUksWUFBWSxHQUEyQyxFQUFFLENBQUE7QUFDcEUsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFBO0FBQ3pCLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQTtBQUN4QixJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUE7QUFDdEIsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFBO0FBRXpCLFNBQVMsZ0JBQWdCLENBQUUsRUFBTTtJQUMvQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxjQUFjLEdBQUcsR0FBRztRQUFFLE9BQU07SUFDN0MsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUMzQixJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLEdBQUcsRUFBRSxDQUFBO1FBQ1osWUFBWSxHQUFHLEVBQUUsQ0FBQTtRQUNqQixjQUFjLEdBQUcsS0FBSyxDQUFBO0tBQ3ZCO0lBQ0QsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2hCLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3hCLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3RCLFNBQVMsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDeEQsU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN4RCxTQUFTLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzFELFNBQVMsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDekQsU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN6RCxTQUFTLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtBQUN0QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVE7SUFDdEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBQ2IsSUFBSSxTQUFTLENBQUMsTUFBTTtRQUFFLEtBQUssRUFBRSxDQUFBO0lBQzdCLElBQUksU0FBUyxDQUFDLE9BQU87UUFBRSxLQUFLLEVBQUUsQ0FBQTtJQUM5QixJQUFJLFNBQVMsQ0FBQyxPQUFPO1FBQUUsS0FBSyxFQUFFLENBQUE7SUFDOUIsSUFBSSxTQUFTLENBQUMsTUFBTTtRQUFFLEtBQUssRUFBRSxDQUFBO0lBQzdCLElBQUksU0FBUyxDQUFDLE1BQU07UUFBRSxLQUFLLEVBQUUsQ0FBQTtJQUM3QixPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFFLEVBQU07SUFDakMsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFBO0lBQzFCLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN2QyxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDakIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRW5CLElBQUksTUFBTSxDQUFDLFNBQVM7WUFBRSxTQUFRO1FBRTlCLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxRQUFRLEVBQUUsRUFBRTtZQUNoRixlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtTQUN2RDtLQUNGO0lBQ0QsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2pELFlBQVksR0FBRyxlQUFlLENBQUE7QUFDaEMsQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQUUsRUFBTTtJQUNuQyxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNsRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDckQsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUNsQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFFLEVBQU0sRUFBRSxRQUFRLEdBQUcsTUFBTTtJQUNyRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQy9CLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO1FBQ3BELE9BQU8sQ0FBQyxJQUFJLEdBQUc7WUFDYixNQUFNLEVBQUUsSUFBSTtZQUNaLFFBQVEsRUFBRSxLQUFLO1lBQ2YsSUFBSSxFQUFFLElBQUk7WUFDVixTQUFTLEVBQUUsSUFBSTtZQUNmLE9BQU8sRUFBRSxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDO1lBQ25ELFFBQVEsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDO1lBQ3hDLElBQUksRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztZQUNoQyxHQUFHLEVBQUU7Z0JBQ0gsR0FBRyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDO2dCQUNqQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQzthQUNwQztZQUNELEtBQUssRUFBRSxFQUFFLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDO1lBQzdDLGNBQWMsRUFBRSxFQUFFLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDO1lBQ3RELEtBQUssRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUMxQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7WUFDeEIsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDO1NBQ3ZCLENBQUE7S0FDRjtJQUNELEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3hCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtZQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUc7Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLFFBQVEsRUFBRSxLQUFLO2dCQUNmLElBQUksRUFBRSxLQUFLO2dCQUNYLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDO2dCQUMvQyxPQUFPLEVBQUUsRUFBRSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsQ0FBQztnQkFDbkQsUUFBUSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7Z0JBQ3hDLElBQUksRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztnQkFDaEMsR0FBRyxFQUFFO29CQUNILEdBQUcsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztvQkFDakMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7aUJBQ3BDO2dCQUNELEtBQUssRUFBRSxFQUFFLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDO2dCQUM3QyxjQUFjLEVBQUUsRUFBRSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsQ0FBQztnQkFDdEQsS0FBSyxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO2dCQUMxQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBQ3hCLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQzthQUN2QixDQUFBO1NBQ0Y7UUFDRCxJQUFJLFFBQVEsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFBRSxTQUFRO1FBQ3RELFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUE7S0FDdkI7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3BCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNULDRCQUE0QjtJQUM1QixjQUFjLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxLQUFLLENBQUE7SUFDL0MsYUFBYSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksS0FBSyxDQUFBO0lBQzlDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3BCLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ2xCLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNuQjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFFLEVBQU07SUFDN0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNoQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNoQixJQUFJLGFBQWEsRUFBRTtZQUNqQixNQUFNLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQzNCLGFBQWEsR0FBRyxLQUFLLENBQUE7U0FDdEI7UUFDRCxPQUFNO0tBQ1A7SUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFZLENBQUE7SUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQUUsT0FBTTtJQUNqQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDekIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNoQyxJQUFJLENBQUMsSUFBSSxJQUFJO1lBQUUsT0FBTTtRQUNyQixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDckIsYUFBYSxHQUFHLElBQUksQ0FBQTtRQUNwQixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJO1lBQUUsT0FBTTtRQUNyQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtLQUMvQjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZTtJQUM3QixhQUFhLEdBQUcsSUFBSSxDQUFBO0FBQ3RCLENBQUM7QUFFRCxLQUFLLFVBQVUsaUJBQWlCLENBQUUsRUFBTTtJQUN0QyxFQUFFLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUE7SUFDcEMsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNqQixNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbkIsb0NBQW9DO1FBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ2hCLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxRQUFRLEVBQUU7Z0JBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUNwRCxTQUFRO1NBQ1Q7UUFDRCxLQUFJLHNCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSTtZQUFFLFNBQVE7UUFDOUUsdUJBQXVCO1FBQ3ZCLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUEsQ0FBQyxtQkFBbUI7UUFDN0YsSUFBSSxhQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFO1lBQ2hFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDeEMsU0FBUTtTQUNUO1FBQ0QsTUFBTSxNQUFNLEdBQUcsYUFBYSxFQUFFLENBQUE7UUFDOUIsSUFBSSxFQUFFLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsR0FBRyxFQUFFLEVBQUU7WUFDN0UsU0FBUyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7U0FDbEQ7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksRUFBRTtZQUM3RSxTQUFTLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtTQUNoRDthQUFNO1lBQ0wsU0FBUyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7U0FDaEQ7S0FDRjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQTtBQUV2QyxTQUFTLGFBQWE7SUFDcEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDeEUsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxJQUFJLE1BQU0sQ0FBQTtBQUMxQyxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUUsRUFBTSxFQUFFLFFBQWdCO0lBQzNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEdBQUcsUUFBUSxDQUFDLENBQUE7SUFDaEQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBQ2IsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQTtJQUMxQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFDcEIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN0QixLQUFLLEVBQUUsQ0FBQTtLQUNSO0lBQ0QsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFO1FBQ3JCLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDckIsS0FBSyxFQUFFLENBQUE7S0FDUjtJQUNELElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRTtRQUNyQixFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3RCLEtBQUssRUFBRSxDQUFBO0tBQ1I7SUFDRCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFDcEIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNyQixLQUFLLEVBQUUsQ0FBQTtLQUNSO0lBQ0QsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDckIsS0FBSyxFQUFFLENBQUE7S0FDUjtJQUNELElBQUksS0FBSyxJQUFJLFVBQVUsRUFBRTtRQUN2QixFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDLENBQUE7UUFDdEMsT0FBTyxJQUFJLENBQUE7S0FDWjtJQUNELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFFLEVBQU0sRUFBRSxRQUFnQixFQUFFLElBQVksRUFBRSxJQUFXO0lBQ3JFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUM1RyxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtRQUNwQyxPQUFPLENBQUMsQ0FBQTtLQUNUO0lBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNuQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtLQUNqRDtTQUFNO1FBQ0wsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUE7S0FDeEM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMsIFByb2Nlc3NJbmZvIH0gZnJvbSAnQG5zJ1xyXG5pbXBvcnQgeyBuYW1lIGFzIHB1cmNoYXNlZFNlcnZlck5hbWUgfSBmcm9tICcuL3B1cmNoYXNlU2VydmVyJ1xyXG5pbnRlcmZhY2UgU2VydmVySW5mbyB7XHJcbiAgc2Nhbm5lZD86IGJvb2xlYW5cclxuICBwYXJlbnQ6IHN0cmluZ1xyXG4gIGNoaWxkcmVuOiBzdHJpbmdbXVxyXG4gIGhvbWU6IGJvb2xlYW5cclxuICBwdXJjaGFzZWQ6IGJvb2xlYW5cclxuICBoYWNrTHZsOiBudW1iZXJcclxuICBtaW5TZWN1cml0eUx2bDogbnVtYmVyXHJcbiAgbWF4TW9uZXk6IG51bWJlclxyXG4gIHJvb3Q6IGJvb2xlYW5cclxuICByYW06IHtcclxuICAgIG1heDogbnVtYmVyXHJcbiAgICB1c2VkOiBudW1iZXJcclxuICB9XHJcbiAgcG9ydHM6IG51bWJlclxyXG4gIHJlYWR5OiBib29sZWFuXHJcbiAgc2NyaXB0czogUHJvY2Vzc0luZm9bXVxyXG4gIGZpbGVzOiBzdHJpbmdbXVxyXG59XHJcbmV4cG9ydCBsZXQgc2VydmVyczogUmVjb3JkPHN0cmluZywgU2VydmVySW5mbz4gPSB7fVxyXG5leHBvcnQgY29uc3QgY29uc3RhbnRzID0ge1xyXG4gIGhhc1NTSDogZmFsc2UsXHJcbiAgaGFzRlRQOiBmYWxzZSxcclxuICBoYXNTTVRQOiBmYWxzZSxcclxuICBoYXNIVFRQOiBmYWxzZSxcclxuICBoYXNTUUw6IGZhbHNlLFxyXG4gIGx2bDogMFxyXG59XHJcbmV4cG9ydCBsZXQgbW9uZXlTZXJ2ZXJzOiBBcnJheTx7IGhvc3Q6IHN0cmluZywgbW9uZXk6IG51bWJlciB9PiA9IFtdXHJcbmxldCByZWZyZXNoU2VydmVycyA9IHRydWVcclxubGV0IHJ1blVwZGF0ZVRhc2sgPSB0cnVlXHJcbmxldCBsYXN0VXBkYXRlVGltZSA9IDBcclxubGV0IHVzZVNoYXJlc09ubHkgPSBmYWxzZVxyXG5cclxuZnVuY3Rpb24gcmVmcmVzaFZhcmlhYmxlcyAobnM6IE5TKTogdm9pZCB7XHJcbiAgaWYgKERhdGUubm93KCkgLSBsYXN0VXBkYXRlVGltZSA8IDEwMCkgcmV0dXJuXHJcbiAgbGFzdFVwZGF0ZVRpbWUgPSBEYXRlLm5vdygpXHJcbiAgaWYgKHJlZnJlc2hTZXJ2ZXJzKSB7XHJcbiAgICBzZXJ2ZXJzID0ge31cclxuICAgIG1vbmV5U2VydmVycyA9IFtdXHJcbiAgICByZWZyZXNoU2VydmVycyA9IGZhbHNlXHJcbiAgfVxyXG4gIHJlZnJlc2hIb3N0cyhucylcclxuICByZWZyZXNoSG9zdFZhcmlhYmxlcyhucylcclxuICBzb3J0U2VydmVyc0J5TW9uZXkobnMpXHJcbiAgY29uc3RhbnRzLmhhc1NTSCA9IG5zLmZpbGVFeGlzdHMoJ2JydXRlc3NoLmV4ZScsICdob21lJylcclxuICBjb25zdGFudHMuaGFzRlRQID0gbnMuZmlsZUV4aXN0cygnZnRwY3JhY2suZXhlJywgJ2hvbWUnKVxyXG4gIGNvbnN0YW50cy5oYXNTTVRQID0gbnMuZmlsZUV4aXN0cygncmVsYXlzbXRwLmV4ZScsICdob21lJylcclxuICBjb25zdGFudHMuaGFzSFRUUCA9IG5zLmZpbGVFeGlzdHMoJ2h0dHB3b3JtLmV4ZScsICdob21lJylcclxuICBjb25zdGFudHMuaGFzU1FMID0gbnMuZmlsZUV4aXN0cygnc3FsaW5qZWN0LmV4ZScsICdob21lJylcclxuICBjb25zdGFudHMubHZsID0gbnMuZ2V0SGFja2luZ0xldmVsKClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG51bVBvcnRzICgpOiBudW1iZXIge1xyXG4gIGxldCBwb3J0cyA9IDBcclxuICBpZiAoY29uc3RhbnRzLmhhc1NRTCkgcG9ydHMrK1xyXG4gIGlmIChjb25zdGFudHMuaGFzSFRUUCkgcG9ydHMrK1xyXG4gIGlmIChjb25zdGFudHMuaGFzU01UUCkgcG9ydHMrK1xyXG4gIGlmIChjb25zdGFudHMuaGFzRlRQKSBwb3J0cysrXHJcbiAgaWYgKGNvbnN0YW50cy5oYXNTU0gpIHBvcnRzKytcclxuICByZXR1cm4gcG9ydHNcclxufVxyXG5cclxuZnVuY3Rpb24gc29ydFNlcnZlcnNCeU1vbmV5IChuczogTlMpOiB2b2lkIHtcclxuICBjb25zdCBuZXdNb25leVNlcnZlcnMgPSBbXVxyXG4gIGZvciAoY29uc3QgcyBvZiBPYmplY3QuZW50cmllcyhzZXJ2ZXJzKSkge1xyXG4gICAgY29uc3QgaG9zdCA9IHNbMF1cclxuICAgIGNvbnN0IHNlcnZlciA9IHNbMV1cclxuXHJcbiAgICBpZiAoc2VydmVyLnB1cmNoYXNlZCkgY29udGludWVcclxuXHJcbiAgICBpZiAoc2VydmVyLmhhY2tMdmwgPD0gY29uc3RhbnRzLmx2bCAmJiBzZXJ2ZXIucm9vdCAmJiBzZXJ2ZXIucG9ydHMgPD0gbnVtUG9ydHMoKSkge1xyXG4gICAgICBuZXdNb25leVNlcnZlcnMucHVzaCh7IGhvc3QsIG1vbmV5OiBzZXJ2ZXIubWF4TW9uZXkgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbmV3TW9uZXlTZXJ2ZXJzLnNvcnQoKGEsIGIpID0+IGIubW9uZXkgLSBhLm1vbmV5KVxyXG4gIG1vbmV5U2VydmVycyA9IG5ld01vbmV5U2VydmVyc1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWZyZXNoSG9zdFZhcmlhYmxlcyAobnM6IE5TKTogdm9pZCB7XHJcbiAgZm9yIChjb25zdCBob3N0IG9mIE9iamVjdC5rZXlzKHNlcnZlcnMpKSB7XHJcbiAgICBzZXJ2ZXJzW2hvc3RdLnJvb3QgPSBucy5oYXNSb290QWNjZXNzKGhvc3QpXHJcbiAgICBzZXJ2ZXJzW2hvc3RdLnJhbS51c2VkID0gbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0KVxyXG4gICAgc2VydmVyc1tob3N0XS5yZWFkeSA9IG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdCkgPT09IDBcclxuICAgIHNlcnZlcnNbaG9zdF0uc2NyaXB0cyA9IG5zLnBzKGhvc3QpXHJcbiAgICBzZXJ2ZXJzW2hvc3RdLmZpbGVzID0gbnMubHMoaG9zdClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWZyZXNoSG9zdHMgKG5zOiBOUywgaG9zdG5hbWUgPSAnaG9tZScpOiB2b2lkIHtcclxuICBjb25zdCBob3N0cyA9IG5zLnNjYW4oaG9zdG5hbWUpXHJcbiAgaWYgKHNlcnZlcnNbaG9zdG5hbWVdID09IG51bGwgJiYgaG9zdG5hbWUgPT09ICdob21lJykge1xyXG4gICAgc2VydmVycy5ob21lID0ge1xyXG4gICAgICBwYXJlbnQ6ICc6MycsXHJcbiAgICAgIGNoaWxkcmVuOiBob3N0cyxcclxuICAgICAgaG9tZTogdHJ1ZSxcclxuICAgICAgcHVyY2hhc2VkOiB0cnVlLFxyXG4gICAgICBoYWNrTHZsOiBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChob3N0bmFtZSksXHJcbiAgICAgIG1heE1vbmV5OiBucy5nZXRTZXJ2ZXJNYXhNb25leShob3N0bmFtZSksXHJcbiAgICAgIHJvb3Q6IG5zLmhhc1Jvb3RBY2Nlc3MoaG9zdG5hbWUpLFxyXG4gICAgICByYW06IHtcclxuICAgICAgICBtYXg6IG5zLmdldFNlcnZlck1heFJhbShob3N0bmFtZSksXHJcbiAgICAgICAgdXNlZDogbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0bmFtZSlcclxuICAgICAgfSxcclxuICAgICAgcG9ydHM6IG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQoaG9zdG5hbWUpLFxyXG4gICAgICBtaW5TZWN1cml0eUx2bDogbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChob3N0bmFtZSksXHJcbiAgICAgIHJlYWR5OiBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3RuYW1lKSA9PT0gMCxcclxuICAgICAgc2NyaXB0czogbnMucHMoaG9zdG5hbWUpLFxyXG4gICAgICBmaWxlczogbnMubHMoaG9zdG5hbWUpXHJcbiAgICB9XHJcbiAgfVxyXG4gIGZvciAoY29uc3QgaG9zdCBvZiBob3N0cykge1xyXG4gICAgaWYgKHNlcnZlcnNbaG9zdF0gPT0gbnVsbCkge1xyXG4gICAgICBzZXJ2ZXJzW2hvc3RdID0ge1xyXG4gICAgICAgIHBhcmVudDogaG9zdG5hbWUsXHJcbiAgICAgICAgY2hpbGRyZW46IGhvc3RzLFxyXG4gICAgICAgIGhvbWU6IGZhbHNlLFxyXG4gICAgICAgIHB1cmNoYXNlZDogaG9zdC5zdGFydHNXaXRoKHB1cmNoYXNlZFNlcnZlck5hbWUpLFxyXG4gICAgICAgIGhhY2tMdmw6IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKGhvc3RuYW1lKSxcclxuICAgICAgICBtYXhNb25leTogbnMuZ2V0U2VydmVyTWF4TW9uZXkoaG9zdG5hbWUpLFxyXG4gICAgICAgIHJvb3Q6IG5zLmhhc1Jvb3RBY2Nlc3MoaG9zdG5hbWUpLFxyXG4gICAgICAgIHJhbToge1xyXG4gICAgICAgICAgbWF4OiBucy5nZXRTZXJ2ZXJNYXhSYW0oaG9zdG5hbWUpLFxyXG4gICAgICAgICAgdXNlZDogbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0bmFtZSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvcnRzOiBucy5nZXRTZXJ2ZXJOdW1Qb3J0c1JlcXVpcmVkKGhvc3RuYW1lKSxcclxuICAgICAgICBtaW5TZWN1cml0eUx2bDogbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChob3N0bmFtZSksXHJcbiAgICAgICAgcmVhZHk6IG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdG5hbWUpID09PSAwLFxyXG4gICAgICAgIHNjcmlwdHM6IG5zLnBzKGhvc3RuYW1lKSxcclxuICAgICAgICBmaWxlczogbnMubHMoaG9zdG5hbWUpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChob3N0bmFtZSAhPT0gJ2hvbWUnICYmIGhvc3QgPT09IGhvc3RzWzBdKSBjb250aW51ZVxyXG4gICAgcmVmcmVzaEhvc3RzKG5zLCBob3N0KVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpXHJcbiAgbnMudGFpbCgpXHJcbiAgLy8gcmVhZCBzdHVmZiBvbiBtYWluIHRocmVhZFxyXG4gIHJlZnJlc2hTZXJ2ZXJzID0gbnMuYXJnc1swXSBhcyBib29sZWFuID8/IGZhbHNlXHJcbiAgdXNlU2hhcmVzT25seSA9IG5zLmFyZ3NbMV0gYXMgYm9vbGVhbiA/PyBmYWxzZVxyXG4gIHJlZnJlc2hWYXJpYWJsZXMobnMpXHJcbiAgYXdhaXQgbnMuYXNsZWVwKDEwMDApXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGF3YWl0IHJlYWREYXRhKG5zKVxyXG4gICAgYXdhaXQgbnMuYXNsZWVwKDEpXHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiByZWFkRGF0YSAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMSlcclxuICBpZiAocG9ydC5lbXB0eSgpKSB7XHJcbiAgICBpZiAocnVuVXBkYXRlVGFzaykge1xyXG4gICAgICBhd2FpdCB1cGRhdGVTZXJ2ZXJUYXNrcyhucylcclxuICAgICAgcnVuVXBkYXRlVGFzayA9IGZhbHNlXHJcbiAgICB9XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgY29uc3QgZGF0YSA9IHBvcnQucmVhZCgpIGFzIHN0cmluZ1xyXG4gIGlmICghZGF0YS5zdGFydHNXaXRoKCckJykpIHJldHVyblxyXG4gIGlmIChzY3JpcHREb25lLnRlc3QoZGF0YSkpIHtcclxuICAgIGNvbnN0IGEgPSBkYXRhLm1hdGNoKHNjcmlwdERvbmUpXHJcbiAgICBpZiAoYSA9PSBudWxsKSByZXR1cm5cclxuICAgIGNvbnN0IGhvc3RuYW1lID0gYVsxXVxyXG4gICAgcnVuVXBkYXRlVGFzayA9IHRydWVcclxuICAgIGlmIChzZXJ2ZXJzW2hvc3RuYW1lXSA9PSBudWxsKSByZXR1cm5cclxuICAgIHNlcnZlcnNbaG9zdG5hbWVdLnJlYWR5ID0gdHJ1ZVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlVXBkYXRlVGFzayAoKTogdm9pZCB7XHJcbiAgcnVuVXBkYXRlVGFzayA9IHRydWVcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2VydmVyVGFza3MgKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLnByaW50KCdVcGRhdGluZyBzZXJ2ZXIgdGFza3MuLi4nKVxyXG4gIGZvciAoY29uc3QgcyBvZiBPYmplY3QuZW50cmllcyhzZXJ2ZXJzKSkge1xyXG4gICAgY29uc3QgaG9zdCA9IHNbMF1cclxuICAgIGNvbnN0IHNlcnZlciA9IHNbMV1cclxuICAgIC8vIHNraXAgc2VydmVycyBsaWtlIG91ciBob21lIHNlcnZlclxyXG4gICAgaWYgKCFzZXJ2ZXIucm9vdCkge1xyXG4gICAgICBpZiAoc2VydmVyLnBvcnRzIDw9IG51bVBvcnRzKCkpIG51a2VTZXJ2ZXIobnMsIGhvc3QpXHJcbiAgICAgIGNvbnRpbnVlXHJcbiAgICB9XHJcbiAgICBpZiAoLyogIXNlcnZlci5yZWFkeSB8fCAqLyAoc2VydmVyLnJhbS5tYXggLSBzZXJ2ZXIucmFtLnVzZWQpIDwgMi4yNSkgY29udGludWVcclxuICAgIC8vIHNlcnZlci5yZWFkeSA9IGZhbHNlXHJcbiAgICBucy5zY3AoWydfZ3Jvdy5qcycsICdfaGFjay5qcycsICdfd2Vha2VuLmpzJywgJ19zaGFyZS5qcyddLCBob3N0LCAnaG9tZScpIC8vIHVwZGF0ZSB0aGUgZmlsZXNcclxuICAgIGlmICh1c2VTaGFyZXNPbmx5IHx8IChzZXJ2ZXIucHVyY2hhc2VkICYmIHNlcnZlci5yYW0ubWF4ID49IDI1NikpIHtcclxuICAgICAgcnVuU2NyaXB0KG5zLCBob3N0LCAnX3NoYXJlLmpzJywgW2hvc3RdKVxyXG4gICAgICBjb250aW51ZVxyXG4gICAgfVxyXG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0QmVzdFNlcnZlcigpXHJcbiAgICBpZiAobnMuZ2V0U2VydmVyQmFzZVNlY3VyaXR5TGV2ZWwoaG9zdCkgPiBzZXJ2ZXJzW3RhcmdldF0ubWluU2VjdXJpdHlMdmwgKyAxMCkge1xyXG4gICAgICBydW5TY3JpcHQobnMsIGhvc3QsICdfd2Vha2VuLmpzJywgW2hvc3QsIHRhcmdldF0pXHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKGhvc3QpIDwgc2VydmVyc1t0YXJnZXRdLm1heE1vbmV5ICogMC43NSkge1xyXG4gICAgICBydW5TY3JpcHQobnMsIGhvc3QsICdfZ3Jvdy5qcycsIFtob3N0LCB0YXJnZXRdKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcnVuU2NyaXB0KG5zLCBob3N0LCAnX2hhY2suanMnLCBbaG9zdCwgdGFyZ2V0XSlcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHNjcmlwdERvbmUgPSAvXFwkKD88aG9zdD4uKyk6ZG9uZS9cclxuXHJcbmZ1bmN0aW9uIGdldEJlc3RTZXJ2ZXIgKCk6IHN0cmluZyB7XHJcbiAgY29uc3QgcmFuID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5taW4oNSwgbW9uZXlTZXJ2ZXJzLmxlbmd0aCkpXHJcbiAgcmV0dXJuIG1vbmV5U2VydmVyc1tyYW5dPy5ob3N0ID8/ICdob21lJ1xyXG59XHJcblxyXG5mdW5jdGlvbiBudWtlU2VydmVyIChuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICBucy5wcmludCgnV0FSTiBBdHRlbXB0aW5nIHRvIG51a2U6ICcgKyBob3N0bmFtZSlcclxuICBsZXQgcG9ydHMgPSAwXHJcbiAgY29uc3QgdG90YWxQb3J0cyA9IHNlcnZlcnNbaG9zdG5hbWVdLnBvcnRzXHJcbiAgaWYgKGNvbnN0YW50cy5oYXNTUUwpIHtcclxuICAgIG5zLnNxbGluamVjdChob3N0bmFtZSlcclxuICAgIHBvcnRzKytcclxuICB9XHJcbiAgaWYgKGNvbnN0YW50cy5oYXNIVFRQKSB7XHJcbiAgICBucy5odHRwd29ybShob3N0bmFtZSlcclxuICAgIHBvcnRzKytcclxuICB9XHJcbiAgaWYgKGNvbnN0YW50cy5oYXNTTVRQKSB7XHJcbiAgICBucy5yZWxheXNtdHAoaG9zdG5hbWUpXHJcbiAgICBwb3J0cysrXHJcbiAgfVxyXG4gIGlmIChjb25zdGFudHMuaGFzRlRQKSB7XHJcbiAgICBucy5mdHBjcmFjayhob3N0bmFtZSlcclxuICAgIHBvcnRzKytcclxuICB9XHJcbiAgaWYgKGNvbnN0YW50cy5oYXNTU0gpIHtcclxuICAgIG5zLmJydXRlc3NoKGhvc3RuYW1lKVxyXG4gICAgcG9ydHMrK1xyXG4gIH1cclxuICBpZiAocG9ydHMgPj0gdG90YWxQb3J0cykge1xyXG4gICAgbnMubnVrZShob3N0bmFtZSlcclxuICAgIG5zLnByaW50KCdTVUNDRVNTIE51a2VkOiAnICsgaG9zdG5hbWUpXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICByZXR1cm4gZmFsc2VcclxufVxyXG5cclxuZnVuY3Rpb24gcnVuU2NyaXB0IChuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcsIGZpbGU6IHN0cmluZywgYXJnczogYW55W10pOiBudW1iZXIge1xyXG4gIGNvbnN0IHRocmVhZHMgPSBNYXRoLmZsb29yKChzZXJ2ZXJzW2hvc3RuYW1lXS5yYW0ubWF4IC0gc2VydmVyc1tob3N0bmFtZV0ucmFtLnVzZWQpIC8gbnMuZ2V0U2NyaXB0UmFtKGZpbGUpKVxyXG4gIGlmICh0aHJlYWRzID09PSAwIHx8IHRocmVhZHMgPT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIDBcclxuICB9XHJcbiAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgcmV0dXJuIG5zLmV4ZWMoZmlsZSwgaG9zdG5hbWUsIHRocmVhZHMsIC4uLmFyZ3MpXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBucy5leGVjKGZpbGUsIGhvc3RuYW1lLCB0aHJlYWRzKVxyXG4gIH1cclxufVxyXG4iXX0=\",\"filename\":\"master.js\",\"server\":\"home\"}}],[\"findlit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const servers = {};\\r\\nfunction scanTarget(ns, hostname, parent) {\\r\\n    const hosts = ns.scan(hostname);\\r\\n    for (const host of hosts) {\\r\\n        if (servers[host] == null) {\\r\\n            servers[host] = {\\r\\n                skip: false,\\r\\n                parent\\r\\n            };\\r\\n            scanTarget(ns, host, host);\\r\\n            const files = ns.ls(host);\\r\\n            if (files.length === 0)\\r\\n                continue;\\r\\n            const a = files.filter(x => x.endsWith('.lit') || x.endsWith('.txt'));\\r\\n            if (a.length === 0)\\r\\n                continue;\\r\\n            ns.scp(a, 'home', host);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    servers.home = {\\r\\n        skip: true,\\r\\n        parent: ''\\r\\n    };\\r\\n    scanTarget(ns, 'home', 'home');\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZGxpdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kbGl0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxHQUFzRCxFQUFFLENBQUE7QUFDckUsU0FBUyxVQUFVLENBQUUsRUFBTSxFQUFFLFFBQWdCLEVBQUUsTUFBYztJQUMzRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQy9CLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3hCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtZQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUc7Z0JBQ2QsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsTUFBTTthQUNQLENBQUE7WUFDRCxVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUMxQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3pCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDO2dCQUFFLFNBQVE7WUFDaEMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO1lBQ3JFLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDO2dCQUFFLFNBQVE7WUFDNUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1NBQ3hCO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxPQUFPLENBQUMsSUFBSSxHQUFHO1FBQ2IsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsRUFBRTtLQUNYLENBQUE7SUFDRCxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5jb25zdCBzZXJ2ZXJzOiBSZWNvcmQ8c3RyaW5nLCB7IHBhcmVudDogc3RyaW5nLCBza2lwOiBib29sZWFuIH0+ID0ge31cclxuZnVuY3Rpb24gc2NhblRhcmdldCAobnM6IE5TLCBob3N0bmFtZTogc3RyaW5nLCBwYXJlbnQ6IHN0cmluZyk6IHZvaWQge1xyXG4gIGNvbnN0IGhvc3RzID0gbnMuc2Nhbihob3N0bmFtZSlcclxuICBmb3IgKGNvbnN0IGhvc3Qgb2YgaG9zdHMpIHtcclxuICAgIGlmIChzZXJ2ZXJzW2hvc3RdID09IG51bGwpIHtcclxuICAgICAgc2VydmVyc1tob3N0XSA9IHtcclxuICAgICAgICBza2lwOiBmYWxzZSxcclxuICAgICAgICBwYXJlbnRcclxuICAgICAgfVxyXG4gICAgICBzY2FuVGFyZ2V0KG5zLCBob3N0LCBob3N0KVxyXG4gICAgICBjb25zdCBmaWxlcyA9IG5zLmxzKGhvc3QpXHJcbiAgICAgIGlmIChmaWxlcy5sZW5ndGggPT09IDApIGNvbnRpbnVlXHJcbiAgICAgIGNvbnN0IGEgPSBmaWxlcy5maWx0ZXIoeCA9PiB4LmVuZHNXaXRoKCcubGl0JykgfHwgeC5lbmRzV2l0aCgnLnR4dCcpKVxyXG4gICAgICBpZiAoYS5sZW5ndGggPT09IDApIGNvbnRpbnVlXHJcbiAgICAgIG5zLnNjcChhLCAnaG9tZScsIGhvc3QpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgc2VydmVycy5ob21lID0ge1xyXG4gICAgc2tpcDogdHJ1ZSxcclxuICAgIHBhcmVudDogJydcclxuICB9XHJcbiAgc2NhblRhcmdldChucywgJ2hvbWUnLCAnaG9tZScpXHJcbn1cclxuIl19\",\"filename\":\"findlit.js\",\"server\":\"home\"}}],[\"findcct.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const servers = {};\\r\\nfunction scanTarget(ns, hostname, parent) {\\r\\n    const hosts = ns.scan(hostname);\\r\\n    for (const host of hosts) {\\r\\n        if (servers[host] == null) {\\r\\n            servers[host] = {\\r\\n                skip: false,\\r\\n                parent,\\r\\n                contract: false\\r\\n            };\\r\\n            if (ns.ls(host, '.cct').length > 0) {\\r\\n                servers[host].contract = true;\\r\\n            }\\r\\n            scanTarget(ns, host, parent + ' ' + host);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.tail();\\r\\n    servers.home = {\\r\\n        skip: true,\\r\\n        parent: '',\\r\\n        contract: false\\r\\n    };\\r\\n    scanTarget(ns, 'home', 'home');\\r\\n    for (const s of Object.entries(servers)) {\\r\\n        const hostname = s[0];\\r\\n        const node = s[1];\\r\\n        if (!node.contract) {\\r\\n            continue;\\r\\n        }\\r\\n        ns.print(hostname + ': ' + node.parent);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZGNjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kY2N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxHQUF5RSxFQUFFLENBQUE7QUFDeEYsU0FBUyxVQUFVLENBQUUsRUFBTSxFQUFFLFFBQWdCLEVBQUUsTUFBYztJQUMzRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQy9CLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3hCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtZQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUc7Z0JBQ2QsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsTUFBTTtnQkFDTixRQUFRLEVBQUUsS0FBSzthQUNoQixDQUFBO1lBQ0QsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQTthQUM5QjtZQUNELFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUE7U0FDMUM7S0FDRjtBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNULE9BQU8sQ0FBQyxJQUFJLEdBQUc7UUFDYixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxFQUFFO1FBQ1YsUUFBUSxFQUFFLEtBQUs7S0FDaEIsQ0FBQTtJQUNELFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzlCLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN2QyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDckIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLFNBQVE7U0FDVDtRQUNELEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7S0FDeEM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5jb25zdCBzZXJ2ZXJzOiBSZWNvcmQ8c3RyaW5nLCB7IHBhcmVudDogc3RyaW5nLCBza2lwOiBib29sZWFuLCBjb250cmFjdDogYm9vbGVhbiB9PiA9IHt9XHJcbmZ1bmN0aW9uIHNjYW5UYXJnZXQgKG5zOiBOUywgaG9zdG5hbWU6IHN0cmluZywgcGFyZW50OiBzdHJpbmcpOiB2b2lkIHtcclxuICBjb25zdCBob3N0cyA9IG5zLnNjYW4oaG9zdG5hbWUpXHJcbiAgZm9yIChjb25zdCBob3N0IG9mIGhvc3RzKSB7XHJcbiAgICBpZiAoc2VydmVyc1tob3N0XSA9PSBudWxsKSB7XHJcbiAgICAgIHNlcnZlcnNbaG9zdF0gPSB7XHJcbiAgICAgICAgc2tpcDogZmFsc2UsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIGNvbnRyYWN0OiBmYWxzZVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChucy5scyhob3N0LCAnLmNjdCcpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBzZXJ2ZXJzW2hvc3RdLmNvbnRyYWN0ID0gdHJ1ZVxyXG4gICAgICB9XHJcbiAgICAgIHNjYW5UYXJnZXQobnMsIGhvc3QsIHBhcmVudCArICcgJyArIGhvc3QpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMudGFpbCgpXHJcbiAgc2VydmVycy5ob21lID0ge1xyXG4gICAgc2tpcDogdHJ1ZSxcclxuICAgIHBhcmVudDogJycsXHJcbiAgICBjb250cmFjdDogZmFsc2VcclxuICB9XHJcbiAgc2NhblRhcmdldChucywgJ2hvbWUnLCAnaG9tZScpXHJcbiAgZm9yIChjb25zdCBzIG9mIE9iamVjdC5lbnRyaWVzKHNlcnZlcnMpKSB7XHJcbiAgICBjb25zdCBob3N0bmFtZSA9IHNbMF1cclxuICAgIGNvbnN0IG5vZGUgPSBzWzFdXHJcbiAgICBpZiAoIW5vZGUuY29udHJhY3QpIHtcclxuICAgICAgY29udGludWVcclxuICAgIH1cclxuICAgIG5zLnByaW50KGhvc3RuYW1lICsgJzogJyArIG5vZGUucGFyZW50KVxyXG4gIH1cclxufVxyXG4iXX0=\",\"filename\":\"findcct.js\",\"server\":\"home\"}}],[\"purchaseServer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const name = 'botnet-';\\r\\nexport async function main(ns) {\\r\\n    let purchasedServers = ns.getPurchasedServers();\\r\\n    if (ns.getPurchasedServerCost(8) * 25 > ns.getServerMoneyAvailable('home')) {\\r\\n        ns.alert('Not Enough Money!');\\r\\n        return;\\r\\n    }\\r\\n    // purchase servers\\r\\n    if (purchasedServers.length < ns.getPurchasedServerLimit()) {\\r\\n        for (let i = purchasedServers.length; i < ns.getPurchasedServerLimit(); i++) {\\r\\n            ns.purchaseServer(`${name}${i}`, 8);\\r\\n        }\\r\\n    }\\r\\n    let ram = 0;\\r\\n    try {\\r\\n        ram = Math.floor(Number.parseInt(await ns.prompt('Ram for upgrading server?', { type: 'text' })));\\r\\n    }\\r\\n    catch { }\\r\\n    if (ram === 0) {\\r\\n        return;\\r\\n    }\\r\\n    purchasedServers = ns.getPurchasedServers();\\r\\n    let cost = 0;\\r\\n    for (const server of purchasedServers) {\\r\\n        cost += ns.getPurchasedServerUpgradeCost(server, ram);\\r\\n    }\\r\\n    if (ns.getServerMoneyAvailable('home') >= cost) {\\r\\n        for (const server of purchasedServers) {\\r\\n            ns.upgradePurchasedServer(server, ram);\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        ns.alert('Not enough money to buy servers!');\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2VTZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHVyY2hhc2VTZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFXLFNBQVMsQ0FBQTtBQUVyQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUE7SUFDL0MsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMxRSxFQUFFLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUE7UUFDN0IsT0FBTTtLQUNQO0lBQ0QsbUJBQW1CO0lBQ25CLElBQUksZ0JBQWdCLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQzFELEtBQUssSUFBSSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzRSxFQUFFLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQ3BDO0tBQ0Y7SUFDRCxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDWCxJQUFJO1FBQ0YsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsMkJBQTJCLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQVcsQ0FBQyxDQUFDLENBQUE7S0FDNUc7SUFBQyxNQUFNLEdBQUc7SUFDWCxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7UUFDYixPQUFNO0tBQ1A7SUFDRCxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtJQUMzQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLE1BQU0sTUFBTSxJQUFJLGdCQUFnQixFQUFFO1FBQ3JDLElBQUksSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0tBQ3REO0lBQ0QsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO1FBQzlDLEtBQUssTUFBTSxNQUFNLElBQUksZ0JBQWdCLEVBQUU7WUFDckMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUN2QztLQUNGO1NBQU07UUFDTCxFQUFFLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUE7S0FDN0M7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcbmV4cG9ydCBjb25zdCBuYW1lOiBzdHJpbmcgPSAnYm90bmV0LSdcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgcHVyY2hhc2VkU2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKVxyXG4gIGlmIChucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KDgpICogMjUgPiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpKSB7XHJcbiAgICBucy5hbGVydCgnTm90IEVub3VnaCBNb25leSEnKVxyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIC8vIHB1cmNoYXNlIHNlcnZlcnNcclxuICBpZiAocHVyY2hhc2VkU2VydmVycy5sZW5ndGggPCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpKSB7XHJcbiAgICBmb3IgKGxldCBpID0gcHVyY2hhc2VkU2VydmVycy5sZW5ndGg7IGkgPCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpOyBpKyspIHtcclxuICAgICAgbnMucHVyY2hhc2VTZXJ2ZXIoYCR7bmFtZX0ke2l9YCwgOClcclxuICAgIH1cclxuICB9XHJcbiAgbGV0IHJhbSA9IDBcclxuICB0cnkge1xyXG4gICAgcmFtID0gTWF0aC5mbG9vcihOdW1iZXIucGFyc2VJbnQoYXdhaXQgbnMucHJvbXB0KCdSYW0gZm9yIHVwZ3JhZGluZyBzZXJ2ZXI/JywgeyB0eXBlOiAndGV4dCcgfSkgYXMgc3RyaW5nKSlcclxuICB9IGNhdGNoIHsgfVxyXG4gIGlmIChyYW0gPT09IDApIHtcclxuICAgIHJldHVyblxyXG4gIH1cclxuICBwdXJjaGFzZWRTZXJ2ZXJzID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVycygpXHJcbiAgbGV0IGNvc3QgPSAwXHJcbiAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgcHVyY2hhc2VkU2VydmVycykge1xyXG4gICAgY29zdCArPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJVcGdyYWRlQ29zdChzZXJ2ZXIsIHJhbSlcclxuICB9XHJcbiAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKCdob21lJykgPj0gY29zdCkge1xyXG4gICAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgcHVyY2hhc2VkU2VydmVycykge1xyXG4gICAgICBucy51cGdyYWRlUHVyY2hhc2VkU2VydmVyKHNlcnZlciwgcmFtKVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBucy5hbGVydCgnTm90IGVub3VnaCBtb25leSB0byBidXkgc2VydmVycyEnKVxyXG4gIH1cclxufVxyXG4iXX0=\",\"filename\":\"purchaseServer.js\",\"server\":\"home\"}}],[\"debug/forceUpdateServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { forceUpdateTask } from \\\"/master\\\"; // eslint-disable-line\\r\\nexport async function main(ns) {\\r\\n    forceUpdateTask();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yY2VVcGRhdGVTZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlYnVnL2ZvcmNlVXBkYXRlU2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFBLENBQUMsc0JBQXNCO0FBRWhFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsZUFBZSxFQUFFLENBQUE7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5pbXBvcnQgeyBmb3JjZVVwZGF0ZVRhc2sgfSBmcm9tIFwiL21hc3RlclwiIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBmb3JjZVVwZGF0ZVRhc2soKVxyXG59XHJcbiJdfQ==\",\"filename\":\"debug/forceUpdateServers.js\",\"server\":\"home\"}}],[\"print.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { servers } from './master';\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(Object.keys(servers));\\r\\n    const server = await ns.prompt('Server for info?', { type: 'select', choices: Object.keys(servers) });\\r\\n    ns.tprint(`Info about: ${server}: `, servers[server]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHJpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVsQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQy9CLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBVyxDQUFBO0lBQy9HLEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxNQUFNLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtBQUN2RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcbmltcG9ydCB7IHNlcnZlcnMgfSBmcm9tICcuL21hc3RlcidcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBucy50cHJpbnQoT2JqZWN0LmtleXMoc2VydmVycykpXHJcbiAgY29uc3Qgc2VydmVyID0gYXdhaXQgbnMucHJvbXB0KCdTZXJ2ZXIgZm9yIGluZm8/JywgeyB0eXBlOiAnc2VsZWN0JywgY2hvaWNlczogT2JqZWN0LmtleXMoc2VydmVycykgfSkgYXMgc3RyaW5nXHJcbiAgbnMudHByaW50KGBJbmZvIGFib3V0OiAke3NlcnZlcn06IGAsIHNlcnZlcnNbc2VydmVyXSlcclxufVxyXG4iXX0=\",\"filename\":\"print.js\",\"server\":\"home\"}}],[\"deprecated/_hax_old.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0] ?? ns.getHostname();\\r\\n    const minSecurityLevel = ns.args[1];\\r\\n    const maxServerMoney = ns.args[2];\\r\\n    while (true) {\\r\\n        if (ns.getServerBaseSecurityLevel(host) > minSecurityLevel) {\\r\\n            await ns.weaken(host);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(host) < maxServerMoney) {\\r\\n            await ns.grow(host);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(host);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hheF9vbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVwcmVjYXRlZC9faGF4X29sZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ3JELE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQzNDLE9BQU8sSUFBSSxFQUFFO1FBQ1gsSUFBSSxFQUFFLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEdBQUcsZ0JBQWdCLEVBQUU7WUFDMUQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQ3RCO2FBQU0sSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUNwQjthQUFNO1lBQ0wsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQ3BCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgaG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nID8/IG5zLmdldEhvc3RuYW1lKClcclxuICBjb25zdCBtaW5TZWN1cml0eUxldmVsID0gbnMuYXJnc1sxXSBhcyBudW1iZXJcclxuICBjb25zdCBtYXhTZXJ2ZXJNb25leSA9IG5zLmFyZ3NbMl0gYXMgbnVtYmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJCYXNlU2VjdXJpdHlMZXZlbChob3N0KSA+IG1pblNlY3VyaXR5TGV2ZWwpIHtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKGhvc3QpXHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKGhvc3QpIDwgbWF4U2VydmVyTW9uZXkpIHtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyhob3N0KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXdhaXQgbnMuaGFjayhob3N0KVxyXG4gICAgfVxyXG4gIH1cclxufVxuIl19\",\"filename\":\"deprecated/_hax_old.js\",\"server\":\"home\"}}],[\"deprecated/constants_old.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { name as purchasedServerName } from '../purchaseServer';\\r\\nexport let servers = {};\\r\\nexport const constants = {\\r\\n    hasSSH: false,\\r\\n    hasFTP: false,\\r\\n    hasSMTP: false,\\r\\n    hasHTTP: false,\\r\\n    hasSQL: false,\\r\\n    lvl: 0\\r\\n};\\r\\nexport let moneyServers = [];\\r\\nlet refreshServers = true;\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    ns.tail();\\r\\n    while (true) {\\r\\n        refreshVariables(ns);\\r\\n        await ns.asleep(500);\\r\\n    }\\r\\n}\\r\\nexport function refreshVariables(ns) {\\r\\n    if (refreshServers) {\\r\\n        servers = {};\\r\\n        servers.home = {\\r\\n            parent: '',\\r\\n            home: true,\\r\\n            purchased: true,\\r\\n            hackLvl: -1,\\r\\n            maxMoney: -1,\\r\\n            ram: -1,\\r\\n            root: true,\\r\\n            ports: -1,\\r\\n            minSecurityLvl: -1,\\r\\n            ready: false\\r\\n        };\\r\\n        refreshServers = false;\\r\\n    }\\r\\n    refreshTargets(ns);\\r\\n    sortServersByMoney();\\r\\n    constants.hasSSH = ns.fileExists('brutessh.exe', 'home');\\r\\n    constants.hasFTP = ns.fileExists('ftpcrack.exe', 'home');\\r\\n    constants.hasSMTP = ns.fileExists('relaysmtp.exe', 'home');\\r\\n    constants.hasHTTP = ns.fileExists('httpworm.exe', 'home');\\r\\n    constants.hasSQL = ns.fileExists('sqlinject.exe', 'home');\\r\\n    constants.lvl = ns.getHackingLevel();\\r\\n}\\r\\nexport function numPorts() {\\r\\n    let ports = 0;\\r\\n    if (constants.hasSQL) {\\r\\n        ports++;\\r\\n    }\\r\\n    if (constants.hasHTTP) {\\r\\n        ports++;\\r\\n    }\\r\\n    if (constants.hasSMTP) {\\r\\n        ports++;\\r\\n    }\\r\\n    if (constants.hasFTP) {\\r\\n        ports++;\\r\\n    }\\r\\n    if (constants.hasSSH) {\\r\\n        ports++;\\r\\n    }\\r\\n    return ports;\\r\\n}\\r\\nfunction sortServersByMoney() {\\r\\n    const newMoneyServers = [];\\r\\n    for (const s of Object.entries(servers)) {\\r\\n        const host = s[0];\\r\\n        const server = s[1];\\r\\n        if (server.home || server.purchased)\\r\\n            continue;\\r\\n        if (server.hackLvl <= constants.lvl && server.root && server.ports <= numPorts()) {\\r\\n            newMoneyServers.push({ host, money: server.maxMoney });\\r\\n        }\\r\\n    }\\r\\n    newMoneyServers.sort((a, b) => b.money - a.money);\\r\\n    moneyServers = newMoneyServers;\\r\\n}\\r\\nexport function refreshTargets(ns, hostname = 'home', parent = 'home') {\\r\\n    const hosts = ns.scan(hostname);\\r\\n    for (const host of hosts) {\\r\\n        if (servers[host] == null) {\\r\\n            servers[host] = {\\r\\n                parent,\\r\\n                home: false,\\r\\n                purchased: false,\\r\\n                hackLvl: ns.getServerRequiredHackingLevel(host),\\r\\n                maxMoney: ns.getServerMaxMoney(host),\\r\\n                root: ns.hasRootAccess(host),\\r\\n                ram: ns.getServerMaxRam(host),\\r\\n                ports: ns.getServerNumPortsRequired(host),\\r\\n                minSecurityLvl: ns.getServerMinSecurityLevel(host),\\r\\n                ready: ns.getServerUsedRam(host) === 0\\r\\n            };\\r\\n            if (host.startsWith(purchasedServerName)) {\\r\\n                servers[host].purchased = true;\\r\\n                continue;\\r\\n            }\\r\\n            refreshTargets(ns, host, host);\\r\\n        }\\r\\n        else {\\r\\n            servers[host].hackLvl = ns.getServerRequiredHackingLevel(host);\\r\\n            servers[host].maxMoney = ns.getServerMaxMoney(host);\\r\\n            servers[host].root = ns.hasRootAccess(host);\\r\\n            servers[host].ram = ns.getServerMaxRam(host);\\r\\n            servers[host].ports = ns.getServerNumPortsRequired(host);\\r\\n            servers[host].minSecurityLvl = ns.getServerMinSecurityLevel(host);\\r\\n            servers[host].ready = ns.getServerUsedRam(host) === 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzX29sZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZXByZWNhdGVkL2NvbnN0YW50c19vbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksSUFBSSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRS9ELE1BQU0sQ0FBQyxJQUFJLE9BQU8sR0FBZ00sRUFBRSxDQUFBO0FBQ3BOLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUN2QixNQUFNLEVBQUUsS0FBSztJQUNiLE1BQU0sRUFBRSxLQUFLO0lBQ2IsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSztJQUNkLE1BQU0sRUFBRSxLQUFLO0lBQ2IsR0FBRyxFQUFFLENBQUM7Q0FDUCxDQUFBO0FBQ0QsTUFBTSxDQUFDLElBQUksWUFBWSxHQUEyQyxFQUFFLENBQUE7QUFDcEUsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFBO0FBRXpCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNwQixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDVCxPQUFPLElBQUksRUFBRTtRQUNYLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3BCLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNyQjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUUsRUFBTTtJQUN0QyxJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLEdBQUcsRUFBRSxDQUFBO1FBQ1osT0FBTyxDQUFDLElBQUksR0FBRztZQUNiLE1BQU0sRUFBRSxFQUFFO1lBQ1YsSUFBSSxFQUFFLElBQUk7WUFDVixTQUFTLEVBQUUsSUFBSTtZQUNmLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDWCxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ1osR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNQLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNULGNBQWMsRUFBRSxDQUFDLENBQUM7WUFDbEIsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFBO1FBQ0QsY0FBYyxHQUFHLEtBQUssQ0FBQTtLQUN2QjtJQUNELGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNsQixrQkFBa0IsRUFBRSxDQUFBO0lBQ3BCLFNBQVMsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDeEQsU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN4RCxTQUFTLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzFELFNBQVMsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDekQsU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN6RCxTQUFTLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtBQUN0QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVE7SUFDdEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBQ2IsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3BCLEtBQUssRUFBRSxDQUFBO0tBQ1I7SUFDRCxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUU7UUFDckIsS0FBSyxFQUFFLENBQUE7S0FDUjtJQUNELElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRTtRQUNyQixLQUFLLEVBQUUsQ0FBQTtLQUNSO0lBQ0QsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3BCLEtBQUssRUFBRSxDQUFBO0tBQ1I7SUFDRCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFDcEIsS0FBSyxFQUFFLENBQUE7S0FDUjtJQUNELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQztBQUVELFNBQVMsa0JBQWtCO0lBQ3pCLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQTtJQUMxQixLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDdkMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2pCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUVuQixJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLFNBQVM7WUFBRSxTQUFRO1FBRTdDLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxRQUFRLEVBQUUsRUFBRTtZQUNoRixlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtTQUN2RDtLQUNGO0lBQ0QsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2pELFlBQVksR0FBRyxlQUFlLENBQUE7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUUsRUFBTSxFQUFFLFFBQVEsR0FBRyxNQUFNLEVBQUUsTUFBTSxHQUFHLE1BQU07SUFDeEUsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUMvQixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtRQUN4QixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDekIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHO2dCQUNkLE1BQU07Z0JBQ04sSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLE9BQU8sRUFBRSxFQUFFLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUFDO2dCQUMvQyxRQUFRLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztnQkFDcEMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO2dCQUM1QixHQUFHLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7Z0JBQzdCLEtBQUssRUFBRSxFQUFFLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDO2dCQUN6QyxjQUFjLEVBQUUsRUFBRSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQztnQkFDbEQsS0FBSyxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3ZDLENBQUE7WUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsRUFBRTtnQkFDeEMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7Z0JBQzlCLFNBQVE7YUFDVDtZQUNELGNBQWMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1NBQy9CO2FBQU07WUFDTCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUM5RCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNuRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzVDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2pFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUN0RDtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5pbXBvcnQgeyBuYW1lIGFzIHB1cmNoYXNlZFNlcnZlck5hbWUgfSBmcm9tICcuLi9wdXJjaGFzZVNlcnZlcidcclxuXHJcbmV4cG9ydCBsZXQgc2VydmVyczogUmVjb3JkPHN0cmluZywgeyBwYXJlbnQ6IHN0cmluZywgaG9tZTogYm9vbGVhbiwgcHVyY2hhc2VkOiBib29sZWFuLCBoYWNrTHZsOiBudW1iZXIsIG1pblNlY3VyaXR5THZsOiBudW1iZXIsIG1heE1vbmV5OiBudW1iZXIsIHJvb3Q6IGJvb2xlYW4sIHJhbTogbnVtYmVyLCBwb3J0czogbnVtYmVyLCByZWFkeTogYm9vbGVhbiB9PiA9IHt9XHJcbmV4cG9ydCBjb25zdCBjb25zdGFudHMgPSB7XHJcbiAgaGFzU1NIOiBmYWxzZSxcclxuICBoYXNGVFA6IGZhbHNlLFxyXG4gIGhhc1NNVFA6IGZhbHNlLFxyXG4gIGhhc0hUVFA6IGZhbHNlLFxyXG4gIGhhc1NRTDogZmFsc2UsXHJcbiAgbHZsOiAwXHJcbn1cclxuZXhwb3J0IGxldCBtb25leVNlcnZlcnM6IEFycmF5PHsgaG9zdDogc3RyaW5nLCBtb25leTogbnVtYmVyIH0+ID0gW11cclxubGV0IHJlZnJlc2hTZXJ2ZXJzID0gdHJ1ZVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpXHJcbiAgbnMudGFpbCgpXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIHJlZnJlc2hWYXJpYWJsZXMobnMpXHJcbiAgICBhd2FpdCBucy5hc2xlZXAoNTAwKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZnJlc2hWYXJpYWJsZXMgKG5zOiBOUyk6IHZvaWQge1xyXG4gIGlmIChyZWZyZXNoU2VydmVycykge1xyXG4gICAgc2VydmVycyA9IHt9XHJcbiAgICBzZXJ2ZXJzLmhvbWUgPSB7XHJcbiAgICAgIHBhcmVudDogJycsXHJcbiAgICAgIGhvbWU6IHRydWUsXHJcbiAgICAgIHB1cmNoYXNlZDogdHJ1ZSxcclxuICAgICAgaGFja0x2bDogLTEsXHJcbiAgICAgIG1heE1vbmV5OiAtMSxcclxuICAgICAgcmFtOiAtMSxcclxuICAgICAgcm9vdDogdHJ1ZSxcclxuICAgICAgcG9ydHM6IC0xLFxyXG4gICAgICBtaW5TZWN1cml0eUx2bDogLTEsXHJcbiAgICAgIHJlYWR5OiBmYWxzZVxyXG4gICAgfVxyXG4gICAgcmVmcmVzaFNlcnZlcnMgPSBmYWxzZVxyXG4gIH1cclxuICByZWZyZXNoVGFyZ2V0cyhucylcclxuICBzb3J0U2VydmVyc0J5TW9uZXkoKVxyXG4gIGNvbnN0YW50cy5oYXNTU0ggPSBucy5maWxlRXhpc3RzKCdicnV0ZXNzaC5leGUnLCAnaG9tZScpXHJcbiAgY29uc3RhbnRzLmhhc0ZUUCA9IG5zLmZpbGVFeGlzdHMoJ2Z0cGNyYWNrLmV4ZScsICdob21lJylcclxuICBjb25zdGFudHMuaGFzU01UUCA9IG5zLmZpbGVFeGlzdHMoJ3JlbGF5c210cC5leGUnLCAnaG9tZScpXHJcbiAgY29uc3RhbnRzLmhhc0hUVFAgPSBucy5maWxlRXhpc3RzKCdodHRwd29ybS5leGUnLCAnaG9tZScpXHJcbiAgY29uc3RhbnRzLmhhc1NRTCA9IG5zLmZpbGVFeGlzdHMoJ3NxbGluamVjdC5leGUnLCAnaG9tZScpXHJcbiAgY29uc3RhbnRzLmx2bCA9IG5zLmdldEhhY2tpbmdMZXZlbCgpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBudW1Qb3J0cyAoKTogbnVtYmVyIHtcclxuICBsZXQgcG9ydHMgPSAwXHJcbiAgaWYgKGNvbnN0YW50cy5oYXNTUUwpIHtcclxuICAgIHBvcnRzKytcclxuICB9XHJcbiAgaWYgKGNvbnN0YW50cy5oYXNIVFRQKSB7XHJcbiAgICBwb3J0cysrXHJcbiAgfVxyXG4gIGlmIChjb25zdGFudHMuaGFzU01UUCkge1xyXG4gICAgcG9ydHMrK1xyXG4gIH1cclxuICBpZiAoY29uc3RhbnRzLmhhc0ZUUCkge1xyXG4gICAgcG9ydHMrK1xyXG4gIH1cclxuICBpZiAoY29uc3RhbnRzLmhhc1NTSCkge1xyXG4gICAgcG9ydHMrK1xyXG4gIH1cclxuICByZXR1cm4gcG9ydHNcclxufVxyXG5cclxuZnVuY3Rpb24gc29ydFNlcnZlcnNCeU1vbmV5ICgpOiB2b2lkIHtcclxuICBjb25zdCBuZXdNb25leVNlcnZlcnMgPSBbXVxyXG4gIGZvciAoY29uc3QgcyBvZiBPYmplY3QuZW50cmllcyhzZXJ2ZXJzKSkge1xyXG4gICAgY29uc3QgaG9zdCA9IHNbMF1cclxuICAgIGNvbnN0IHNlcnZlciA9IHNbMV1cclxuXHJcbiAgICBpZiAoc2VydmVyLmhvbWUgfHwgc2VydmVyLnB1cmNoYXNlZCkgY29udGludWVcclxuXHJcbiAgICBpZiAoc2VydmVyLmhhY2tMdmwgPD0gY29uc3RhbnRzLmx2bCAmJiBzZXJ2ZXIucm9vdCAmJiBzZXJ2ZXIucG9ydHMgPD0gbnVtUG9ydHMoKSkge1xyXG4gICAgICBuZXdNb25leVNlcnZlcnMucHVzaCh7IGhvc3QsIG1vbmV5OiBzZXJ2ZXIubWF4TW9uZXkgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbmV3TW9uZXlTZXJ2ZXJzLnNvcnQoKGEsIGIpID0+IGIubW9uZXkgLSBhLm1vbmV5KVxyXG4gIG1vbmV5U2VydmVycyA9IG5ld01vbmV5U2VydmVyc1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVmcmVzaFRhcmdldHMgKG5zOiBOUywgaG9zdG5hbWUgPSAnaG9tZScsIHBhcmVudCA9ICdob21lJyk6IHZvaWQge1xyXG4gIGNvbnN0IGhvc3RzID0gbnMuc2Nhbihob3N0bmFtZSlcclxuICBmb3IgKGNvbnN0IGhvc3Qgb2YgaG9zdHMpIHtcclxuICAgIGlmIChzZXJ2ZXJzW2hvc3RdID09IG51bGwpIHtcclxuICAgICAgc2VydmVyc1tob3N0XSA9IHtcclxuICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgaG9tZTogZmFsc2UsXHJcbiAgICAgICAgcHVyY2hhc2VkOiBmYWxzZSxcclxuICAgICAgICBoYWNrTHZsOiBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChob3N0KSxcclxuICAgICAgICBtYXhNb25leTogbnMuZ2V0U2VydmVyTWF4TW9uZXkoaG9zdCksXHJcbiAgICAgICAgcm9vdDogbnMuaGFzUm9vdEFjY2Vzcyhob3N0KSxcclxuICAgICAgICByYW06IG5zLmdldFNlcnZlck1heFJhbShob3N0KSxcclxuICAgICAgICBwb3J0czogbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChob3N0KSxcclxuICAgICAgICBtaW5TZWN1cml0eUx2bDogbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChob3N0KSxcclxuICAgICAgICByZWFkeTogbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0KSA9PT0gMFxyXG4gICAgICB9XHJcbiAgICAgIGlmIChob3N0LnN0YXJ0c1dpdGgocHVyY2hhc2VkU2VydmVyTmFtZSkpIHtcclxuICAgICAgICBzZXJ2ZXJzW2hvc3RdLnB1cmNoYXNlZCA9IHRydWVcclxuICAgICAgICBjb250aW51ZVxyXG4gICAgICB9XHJcbiAgICAgIHJlZnJlc2hUYXJnZXRzKG5zLCBob3N0LCBob3N0KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2VydmVyc1tob3N0XS5oYWNrTHZsID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoaG9zdClcclxuICAgICAgc2VydmVyc1tob3N0XS5tYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KGhvc3QpXHJcbiAgICAgIHNlcnZlcnNbaG9zdF0ucm9vdCA9IG5zLmhhc1Jvb3RBY2Nlc3MoaG9zdClcclxuICAgICAgc2VydmVyc1tob3N0XS5yYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oaG9zdClcclxuICAgICAgc2VydmVyc1tob3N0XS5wb3J0cyA9IG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQoaG9zdClcclxuICAgICAgc2VydmVyc1tob3N0XS5taW5TZWN1cml0eUx2bCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwoaG9zdClcclxuICAgICAgc2VydmVyc1tob3N0XS5yZWFkeSA9IG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdCkgPT09IDBcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19\",\"filename\":\"deprecated/constants_old.js\",\"server\":\"home\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"home\"}}],[\"config/config.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONFIG = {\\r\\n    shareOnly: false\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHO0lBQ3BCLFNBQVMsRUFBRSxLQUFLO0NBQ2pCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQ09ORklHID0ge1xyXG4gIHNoYXJlT25seTogZmFsc2VcclxufVxyXG4iXX0=\",\"filename\":\"config/config.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"botnet-0\",\"botnet-1\",\"botnet-2\",\"botnet-3\",\"botnet-4\",\"botnet-5\",\"botnet-6\",\"botnet-7\",\"botnet-8\",\"botnet-9\",\"botnet-10\",\"botnet-11\",\"botnet-12\",\"botnet-13\",\"botnet-14\",\"botnet-15\",\"botnet-16\",\"botnet-17\",\"botnet-18\",\"botnet-19\",\"botnet-20\",\"botnet-21\",\"botnet-22\",\"botnet-23\",\"botnet-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"owo.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"owo.txt\",\"text\":\"                                                                                                                                                                              \\n                                                                                                                                                                              \\n                                                                                                                                                                              \\n                                                                                                            .:                                                                \\n                                                .-                                                        :=.=-                                                               \\n                                              :+.=+                                                      ++   =-                                                              \\n                                             =#.  -*:                                                  .#-     +=                                                             \\n                                            =#     .*=                                                -#:       +=                                                            \\n                                           =#        =*:                                             -#.         =+                                                           \\n                                          -%.         :*+                                           -%.           =*                                                          \\n                                         .%:      .     =#:                                        .%.             -*                                                         \\n                                         #=       =.     .*+                                       %-               :*                                                        \\n                                        -#        .*       =#-                                    ++                 -*                                                       \\n                                        #-         -*       .**.                                 :%.               -  -#.                                                     \\n                                       :%.          +=        -#-                                *=                =:  -#.                 .                                  \\n                                       +*            #:        .*+                              .#.        ..      .+   :%:                                                   \\n                                       *+            -#          +#.                            =*       :#++++=:   +: . :%.                                                  \\n                                       *+    :---:.   #-          :*-                           *-       *#   .:=+- .*    -%.                                                 \\n                                       *+   :%-:-=++=:-#            =+:                         #.       =%       ===*-    =#                                                 \\n                                       *+    %:    .:=:#-             -=.     ..............   .*   .:---=#         ::*     **                                                \\n           :.                          :+.::.+#        =#              :+---============++++++==#++*+=-::.            *:     %-                                       .       \\n           +=-                       -==+-::. :         #:   ..                               .**=:                   =+     -%.                                   .=+#.      \\n          -# :==:                  :#=.                 =*-=-:.                              :#:                      .#.     **                                 :+*+ +=      \\n          *+   :=+-.               .++:              .-+==:.                                 =%-..                     *-     .%:                            .-+*+-   =*      \\n          #-     .-++=:              .=*+.        .-++-.                                      :+*++-:::::              =+      **                       .:=+*+=:.     :#      \\n          %:        .:=++-:           :+-:      .++=.                                            ::*#-::.              :#      :%.                 .-=+*++-:.         :%      \\n          %:   .=       .-=++=:.     =#.  ... .++-                                                 *=.::... ....        #.      #+            .:=+*+=-:.              -%      \\n          %:    :*:         .-=++=:.:@:..::.:**:                                                  -%:::::::::.:::.   -:.#:      -%       .:=+++=-:         ..         =%      \\n          #-     .++.           .:-=+###*+:=#-                   :-                    .-         .=++=++++=++:....:#+-=%-       %-  .-==+=-:.           :=+.         *#      \\n          *+       :++.               :=*##+                   :*%=                    .#              ...   -++==+*=   *-       +#---:.              .-++:           %=      \\n          -%         -++:               :#-                  .+#=#.                     ++                     .:::.    =-       .#.                :=+=.            -@.      \\n           %-          -*+:            =#.          :       :#*:=*                      =@=                             :.        :.              -++-               #+       \\n           -#            -*+:         +*           :=      -%=::*=                      -**+                                                   .=*=.                =%        \\n            #=             -#+.      +*            =-     -@=:::#-                      -#:#*                                                 =*-                  :%:        \\n            .%:     -++++++=++*=    ++             +:    :@=::.:%-                      -#::*#.                                             -#+.                  .%-         \\n             :#: . +#.        .+*: ++            ..+=..  %+::..:%-                      -#:::=%-      ...     .                           .**=:-=====-.          .#-          \\n              :#:  :#:          :***              :%-:-:*#--:..:%-                      :#::-:=%*:.:::...     -                          =%-       .:=*=        .*:           \\n               .=. .+#=          :#               +%-  :@-:::---%=                      -#---=--+%+           =:                       .*#.           +*       :+.            \\n                 -*+:           .#               :#=+  #*.      +*                      +*.  ..::-##:         --              ..      :%+            +#      .+*.             \\n                =*.             *:               *+:# -%-.      -%                      *+.    ..::=#*:       :+              -*     -%-            +*     .+#=               \\n                +*-:..  ..     ==      ::::::::.-%:.*=**.    .:::%-..-                 .%-       ...:+%*.     :+               #.   =%:            #*    .+#=                 \\n                 .=++++-:::   .#  . ..:::-=::::.+#-==%%=....   . =#.+#.:::::::::::::::.=#. ....       .=#+. ..:+               *=  =%:             .*+ :=*-                   \\n                      *=.::.. *- ::::::::-+:::::#++#####%#%#######%**#+..::::::::::::::#+--==========----*#++.-+.:::::::::::::.**.:%=..    .         *#-:                     \\n                      -*.:...=* .:::::::::*-:::-%..:::=#*********#*###++-..:::::::::--*#+##%%%%%@@@@@@@@%%%@%*+*::::::::::::::.+#::++.::..:::.      .**                       \\n                       #+--=+#. :::::::::.=*.:.+#     :#+++++++++++-:-  =+=-:.::::::.=#. .**+**************#*-**--::::::::::::.**::-#:::::::::=++*+++-                        \\n                        -==:*= ::::::::::::#=.:+%     .#+*******+*-      .-+++-:::::+#.   #*+*+++++++++*-     --.:::::::::::::.#+.:.+*#-.::.:.++..                            \\n                           -+ ::::::::::::::#-.#@.    .#+*********+==+      .:===--==     #*+***********-     +.:::::::::::::::#+-===+*%-..--.+=                              \\n                        .-** .::::::::::::::-#=*%-     #++*********+%*           ..       #*+************++* .=.::::::::::::::-%-:::-=+*#**%@*#.               . .            \\n                      -++** .:::::::::::::::::*#**     =#+++*****++*#.                    +%++**********+*@+ =:.:::::::::::::.+#.       .:-=*##*+-:                           \\n                   :+*=.-=.:::::::-::::::::::::-=*      -****+++**#*.                      *#**+++++++++*%* .=.:::::::::::::::%+..            .-=*###+=:                      \\n                 -++: .==.::...::-#::::::::::::::+       .-+*****+:                         -+*##*****##*=  +.::::::::::::::.=%:.                  .:=*###+-.                 \\n              .=*=.  :=-:---==++=-#:.::::::::::::+.......   ....                              .:-====--:.  +-.:::::::::::::::%+-=--==++++++=-=--::.     .-+###+:              \\n           .-++-   :-===+=+==-:...+* :::::::::::-=.. .......                                 .   ........:+-.-==:::::::::::.*#----::-----:--#+++******+=-.  .-+##*-           \\n         :=+=.               .:-==:#= ::::::::::#: ........                                   ..........-*==++=:::::::::::.-%.              :+     ..:-=+++=:   :+*#*-        \\n      :-=-:           .:-=++++=:.  .%: :::::::::+*-.   .....                   .-:            ........:+++#=:::::::::::::::%-                -*             .      .-++=::    \\n   .:-:.      ..::-=++**=-:.        :%- :::::::::-+*+=:.                       =++=           .....     -*:.::::::::::::::%+                  =+                       .-=.   \\n.-.    .:::--===--:.. =.             .#+ .::::::::.:-=*#++=--:..                ---                ..::=#::::::::::::::.-#+.::. ..       .-=+===                     .-=-     \\n .-=:.......         :+  .::       :. .+*-.::::::::::.++:--=++*##**++==---:::::::........::--=++*##%%%%@-.::::::::::::.=%*.::.::::=:     :#...                   .:+**=.      \\n   .-==-:.           :*===-*-    .+#-:: :++:.:::::::::#=.::.:.+##%####%%#%@@%%%%%%%%%%%%%@%%@@%@%%%%%##*.:::::::::::.-*#=#*=#=.:.=++*=:  *-                  .-=*#*=.         \\n       :-=++==--::.......  .=*=-=#*=#*++-=%+-.::::::.+#::::::.=##%###*#=:%++#*########%+:*%#########**%=.:::::::::.:+#=:.:-:-#*:-*-::-+===         ....:-=++**+=:             \\n            .:--====--=::::::-=-=...  .:=#-.++.::::.-#::::.::=###%####%-:%**%%##%#*##*%* :%###%####%##%-:::::::.::=+=:.:::::::+**-:----*=-=+++*++*++**+++=-:.                 \\n                   ::                   =-.:.=*:::.=%-.::-+++++%%@###*#++%#**+++##%###%#.:%###%##*#%*#%::::::.:=++=:.:::::::::.:.:::::.#:     .  .                            \\n                  =#.-=-.              ++.:-++**.:++-*==+=+#:..-=*###%%#+-...    .=#%*%* :%#*#%###%%##%:.::.:+*=-:::::*=:::::::++:.:::.++                                     \\n                  +*  .:-==-:.       :**=++=-. #==-   *=   -*=:....-%*=--==**#*+=: -%%#==#%####*#****+++ ::***#+-.::.+#@=:::.:++*%+-:..:#:                       .            \\n                  +*      .:--====----:...     -=    :#*    .+*:   +*  ...-=::-+#%*++%===-----::::.....+. :-*#-:#*:-#* *#..:+#-  :*##+=:-#.           .:-:                    \\n                  +*            ..::---=====--:.    =#=*#:    :*+. *+ :...##:....:*@:%:             .-++=-:-=+:-+*#*-  .%+*#+.     .-+*#*#*.::--=++****++#     ..  .          \\n                  :%.     :.               ..::-:..*#===+%+     -+--# .:.:=......:=-=%          .:=+#%+--**+-.*+==*+:=-=**#+++**********#*****++=--:.   =%                    \\n                   #+      :-.                   .##==+===##-     -+##.  .-.....:==+%.      :-+++=:  =%*=-:..-%====**..      .....  ...                 #*       .            \\n                   .%:      .-=-.               .#*===+==+--##-     :*#==-+---=++*%@- .:-=++=-:    .-+##*=--=*+++===**                     .:-==-.     -@:                    \\n                    -%.       .-+=:             ##=======+-::=##=     .=#%+===+#*#%#=++=-.     :-=++%+==*##*++*+=====#+               .:-=+++-.       .%+       :- *:         \\n                     =%.         :++-          +%======+=+-::::=*#+:    .%.   .**-:..    .:==++==-:*#=======**+=======%=          .:=+++=-.          .%*      .**. %- :       \\n           .          -%:     :=+==***-       -%+======++++:---::-+#*+:  *+ .-=:  .:--==+==--:::::+@+=====+#+=========+%:     .-=+**+-.             .#*     .+#-   ++ +=      \\n           .           :#=    +%:    .=*-    .%*=======++=#-::::::::-+*+-:+-+=--=+=----:::::::-::=%+======*+===========*#  .-==-. .:-=+*+-         -%+    .=*-     .-  %:     \\n           .             ==.   =#-      =+.  +#======+==+=+*++++++++++=:---==--::::::----:--:::-*#+=====================%=:=:           =@.      -**.    -*-           =#     \\n           .              .=::+==*-    .:=*=-*========++====+++++++*#--:::----::-+*+==--:::::-+#*=======++==============*#            :**-     -*+.    :+-              + ..  \\n                           .#*:     .=**+=+***##*+=====+*+=========**:::::::::::-+++**********#+========*#=========+++++++           *#-     -*+.   .:=-                  :*  \\n                           %#:.. .-+#*+========+*##*====#==========*#:::::::::-:=*=======++++===========+#+***####*###****+=         -*   .-++:  ..::.                     #- \\n           .               :-+++*##+==============+#%+=**===========%=::::::::::#+======================+%#*+++============*#-        +*.-+=:.....                         -# \\n                              .+#+==================+#+#============*#=====-::-##======================#%+==================+%+....    #+:. ..                             .%:\\n                             =#*=====================#%*============#+:-===-:-#*======================##=====================+%*::::===*-                                   #=\\n                           :#*=======================*%+===========+%-::::::::#*=====================#%=======================+@+..:#--.                                    *#\\n                          =#+========================*%============#*:-:::::-:=%====================+%+========================*@*++*                                       *#\\n                         +#==========================+%===========+%-:::::::::-%+===================#*==========================#@+=:                                       *#\\n                        +*===========================*%===========##:::::::::-:*#===================#+=========================+*%+                                         *#\\n                      .#+============================*%===========%=:::::::::-:=%===================#+=========================++#@:                                        %+\\n                     .#=============================+#*==========*%-:::::::::::-%+=================+#===========================++%*                                       .%-\\n                     #+==============================#*==========%*:-:::::::::::%#=================*#===========================++#%                                       -% \\n                    -%-==============================#*=========+%=:::::::::::::##=================#*===========================+++%=                           .          *+ \\n                     #*=============================+%*=========*%::::::::::::-:*%================+%+============================++*%:                         ..         .#. \\n                      +**+==========================+%+=========%#:-::::::::::-:+%+===============*%=============================+++#*                                    -=  \\n                     += -+**+======================+*%+========+%=::::::::::::-:+@+===============##=============================+++*%.                        ...       .-   \\n                     @:    -+*+++******#*******+++++*%+========#*:-:::::::::::::=@+===============*%=============================+++*%.              ..          .    . +=    \\n                    -% :==-:.......:::::-=+++***##*###========+*-:---:::::::::::-%*================*#+===========================++*#%.                ...          ...=#     \\n                    -@.  .:=+++==-:.     ......:%#++=========+#:.::::::::::::::-:*#=================+##*+======+++***##+++++++****%%%-        .              .  ..:::.+#.     \\n                     *+=:.     .-=+++*+++++=-:.*%+==========+%-........  .... ...=%===================%+++=+++*+++=-.:--==+++*****=%#+-.      ..         ......::::.-**       \\n                       :=+*++=-:.     .:===+++*@*===========%*----:::::::::::::::-%+==================#+.::...........:::--==++=-:-%####=             ..::::::::..-*#-        \\n                           .:-==++++++===+*#######*++=======+*******+++++========-*+==================+%-::.::::-------:::..:::---*%####%:       ...:::::::::..:=*#=          \\n                                     ...:%#*******######**++=======++++*********+======================+*++=-:..         .:-+*##%######*%= ....::::::::...::-+*#+-            \\n                                        ##************%%########**++===============================+++*##%%#%%###########%%%#####%#####*%+::::::::::::-=++***=:               \\n                                       +%*************%#********************+*++++++++++++++***############**##****###*******#####%####*%+.::::::--+++*+=-:                   \"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.008,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"17.8.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":35386042290,\"moneyMax\":884651057250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1342,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-379670-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,31],[19,20],[19,24],[9,14],[15,21],[20,29],[17,26],[1,2],[21,30],[23,31],[9,11],[12,22],[25,26]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-361473.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":246506,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-96759.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1735344224,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"99.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"megacorp\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"megacorp\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"megacorp\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55076977797,\"moneyMax\":1376924444925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1298,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"81.8.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"b-and-a\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"b-and-a\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"b-and-a\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":23939076242,\"moneyMax\":598476906050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":964,\"serverGrowth\":61,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"43.6.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"blade\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"blade\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"blade\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":13372566545,\"moneyMax\":334314163625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1018,\"serverGrowth\":75,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"26.7.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"nwo\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"nwo\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"nwo\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32157080263,\"moneyMax\":803927006575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":999,\"serverGrowth\":66,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"80.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":18215630195,\"moneyMax\":455390754875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1010,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"18.4.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"omnitek\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"omnitek\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"omnitek\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":20031133466,\"moneyMax\":500778336650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":975,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"45.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"4sigma\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"4sigma\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"4sigma\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":18227015550,\"moneyMax\":455675388750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1162,\"serverGrowth\":96,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-681819.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":336122675173,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-276063-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[34,80,36,37,191,14,136,26,192,182,91,66,20,36,145,153,85,40,33,179,136,198,141,200,117,196,121,66,28,159,24,110,111,23]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"71.6.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"kuai-gong\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"kuai-gong\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"kuai-gong\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":22894279125,\"moneyMax\":572356978125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1258,\"serverGrowth\":91,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"0.3.9.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"fulcrumtech\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"fulcrumtech\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"fulcrumtech\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1583074454,\"moneyMax\":39576861350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1032,\"serverGrowth\":87,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-775604.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[40,40,2,14,1,38,22,12,34,35],[43,21,33,37,8,7,25,25,2,36],[18,6,44,21,5,30,5,50,31,48],[43,39,2,49,41,19,29,39,41,45],[10,34,14,11,32,16,46,3,11,32]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592814-Netburners.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":41195,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"64.8.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1160,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"75.2.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"stormtech\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"stormtech\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"stormtech\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1117868690,\"moneyMax\":27946717250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1023,\"serverGrowth\":79,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-902830-Netburners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[27,26,37,50,4,19,19,40,44],[40,50,50,43,1,22,47,31,33],[46,14,4,7,1,47,4,4,41],[25,34,29,22,25,48,4,38,2],[35,49,30,4,37,34,6,43,21],[43,4,40,28,8,31,41,33,34],[41,46,21,4,37,44,10,44,8]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"88.8.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":910923404,\"moneyMax\":22773085100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":978,\"serverGrowth\":63,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298813.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,10],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"22.6.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"infocomm\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"infocomm\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"infocomm\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":667962302,\"moneyMax\":16699057550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":940,\"serverGrowth\":46,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995785.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,-4,2,5,10,4,-8,-4,-6,-7,3,-8],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"57.7.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"helios\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"helios\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"helios\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":714472513,\"moneyMax\":17861812825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":75,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-865990.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"i6uQUUUUUUUUUUUU8wt8oUU8wt8oODf3kySSxULSSxULSxULSSdbDRuiTcbKkMQ7kMQfMQWM\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"5.1.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"vitalife\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"vitalife\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"vitalife\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":734718444,\"moneyMax\":18367961100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":67,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"81.4.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"icarus\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"icarus\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"icarus\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":933635896,\"moneyMax\":23340897400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":89,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-960457-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[122,140,69,105,57,98,180,95,18,122,68,18,164,139,88,62,124,169,50,86,175,193,83,74,8,23,96,144],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"95.3.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"univ-energy\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"univ-energy\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"univ-energy\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1171013369,\"moneyMax\":29275334225,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":80,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"79.4.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"titan-labs\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"titan-labs\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"titan-labs\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":851000420,\"moneyMax\":21275010500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":80,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"97.1.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"microdyne\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"microdyne\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"microdyne\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":517340000,\"moneyMax\":12933500000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":80,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-910716.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[100,165,138,70,47,59,188,92,167,4,179,8,177,47,54,147,16,197,70,199,183,73,129,68],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"89.9.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":806282687,\"moneyMax\":20157067175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":76,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-179637.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"81IlDwero245eKZ4X726Ven00g811F4861XfQrY879uXBsN30kY03QIO913QXA636otMGm753\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"49.2.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"galactic-cyber\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"galactic-cyber\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"galactic-cyber\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":810186577,\"moneyMax\":20254664425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":72,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-430640.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[28,37,9,33,22,19,44,8,29,38,42,41,29],[49,5,44,8,8,10,11,16,46,12,41,9,11],[29,25,15,12,15,32,31,36,43,6,27,41,30]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-440545.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[1,4],[0,8],[2,4],[2,5],[7,8],[4,9],[7,9],[5,7],[0,1],[0,9],[3,4],[0,3],[0,6],[6,7]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"75.1.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"aerocorp\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"aerocorp\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"aerocorp\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1002987760,\"moneyMax\":25074694000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"81.8.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"omnia\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"omnia\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"omnia\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":992938659,\"moneyMax\":24823466475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":60,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-206568.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2388160692\",-84],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-925660.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"84kgiaNf5612bw753lzc433LwB625dBjWW940581z898WBj64edn635PWedd\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"49.3.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"zb-def\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"zb-def\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"zb-def\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":1033110041,\"moneyMax\":25827751025,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":792,\"serverGrowth\":75,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"42.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":877928417,\"moneyMax\":21948210425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"20.6.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"solaris\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"solaris\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"solaris\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":756385791,\"moneyMax\":18909644775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":759,\"serverGrowth\":78,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"70.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1464565588,\"moneyMax\":36614139700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":880,\"serverGrowth\":68,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-410669.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[31,21,44,46,36,9,42,29,7,27,40,18,44,21],[27,38,13,2,9,28,49,48,36,12,36,32,34,21],[30,41,50,2,47,21,21,22,16,7,36,10,22,14],[13,9,18,28,8,31,12,39,46,15,6,49,34,40],[1,14,20,9,39,17,32,8,35,46,23,4,34,31],[41,48,6,31,27,32,49,43,10,27,24,21,40,30],[37,32,28,1,42,50,20,46,16,22,17,19,41,31],[19,34,14,46,50,22,3,32,24,29,13,34,8,23],[10,23,19,20,31,35,22,24,33,45,25,1,12,26]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-344791.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1,0],[0,0,1,0,0,1,0,0],[1,0,1,0,1,0,0,0],[0,0,0,1,0,1,1,0],[0,0,0,1,1,0,0,0],[0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"92.8.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"global-pharm\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"global-pharm\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"global-pharm\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1663985497,\"moneyMax\":41599637425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":87,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"41.6.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1242456578,\"moneyMax\":31061414450,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":788,\"serverGrowth\":77,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-92957.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[16,8,44,34],[41,14,12,50],[11,24,7,19],[28,39,43,26],[20,36,42,12]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-846963.cct\",\"type\":\"Total Ways to Sum\",\"data\":29,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"13.1.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"zeus-med\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"zeus-med\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"zeus-med\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1376974785,\"moneyMax\":34424369625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":72,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"49.9.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"unitalife\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"unitalife\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"unitalife\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1056198353,\"moneyMax\":26404958825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":781,\"serverGrowth\":77,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-105182.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CLOUD ENTER LOGIN FRAME LINUX\",8],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"28.9.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"lexo-corp\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"lexo-corp\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"lexo-corp\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":797988177,\"moneyMax\":19949704425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":722,\"serverGrowth\":62,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"58.8.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"rho-construction\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"rho-construction\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"rho-construction\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":537205796,\"moneyMax\":13430144900,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":482,\"serverGrowth\":40,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131403.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[146,110,56,129],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"30.1.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"alpha-ent\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"alpha-ent\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"alpha-ent\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":607128352,\"moneyMax\":15178208800,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":501,\"serverGrowth\":59,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"71.8.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"aevum-police\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"aevum-police\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"aevum-police\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":250610817,\"moneyMax\":6265270425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":412,\"serverGrowth\":34,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-429395.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"15022613222\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"18.7.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"rothman-uni\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"rothman-uni\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"rothman-uni\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":246755182,\"moneyMax\":6168879550,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":402,\"serverGrowth\":45,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"31.4.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"zb-institute\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"zb-institute\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"zb-institute\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":869903155,\"moneyMax\":21747578875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":738,\"serverGrowth\":84,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-928928.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[13,29,43,44,8,49,50,44,3,47,45],[36,33,11,40,33,33,49,46,27,15,24],[30,31,3,33,17,7,32,38,9,50,5],[42,14,6,40,13,24,3,26,36,41,42],[22,50,6,41,27,4,33,11,40,37,12],[30,17,33,32,9,22,5,45,14,43,16],[8,23,4,17,31,29,39,41,38,38,34]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"75.9.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"summit-uni\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"summit-uni\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"summit-uni\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"computek\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":233149713,\"moneyMax\":5828742825,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":453,\"serverGrowth\":55,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-992667.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MODEMMEDIAPOPUPFLASHMOUSE\",\"PRIVACY\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"46.8.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":406841998,\"moneyMax\":10171049950,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":646,\"serverGrowth\":70,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"79.5.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"catalyst\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"catalyst\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"catalyst\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":368309064,\"moneyMax\":9207726600,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":425,\"serverGrowth\":45,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-930347.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,0,0,0],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-625661.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100011001000010\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"53.7.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"the-hub\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"the-hub\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"the-hub\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":198043241,\"moneyMax\":4951081025,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":278,\"serverGrowth\":49,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-102915.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,11],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"65.1.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"computek\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"computek\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"computek\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":228770179,\"moneyMax\":5719254475,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":392,\"serverGrowth\":51,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-981675.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,-10,2,8,10,6,-4,-8,-10,10,0,5,4,2,8,2,-4,8,-7,0,-10,-5,3,-3,-6,-4,-10,2,10,3,5,6,-7,6,-1,4,8,-4],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"3.1.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"netlink\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"netlink\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"netlink\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":424,\"serverGrowth\":59,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"70.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"johnson-ortho\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"johnson-ortho\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"johnson-ortho\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":79806972,\"moneyMax\":1995174300,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":285,\"serverGrowth\":49,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616032-CyberSec.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"OWV6Ic1LuNE3eL7BE6cBEcBEcBEcBExExExExExEnyExEuiCS121xEu1CS121xEuMF66A2uMF\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"84.1.8.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"n00dles\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"n00dles\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"n00dles\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.062,\"minDifficulty\":1,\"moneyAvailable\":77916.19961036583,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-677014.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,8],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"66.2.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"foodnstuff\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"foodnstuff\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"foodnstuff\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":5.607999999999998,\"minDifficulty\":3,\"moneyAvailable\":2009047.6072462446,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"51.8.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.100000000000001,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-924832-NiteSec.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MOUSEFRAMECLOUDMACROSHELL\",\"FREEWARE\"],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"91.4.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"joesguns\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"joesguns\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"joesguns\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":14.243999999999998,\"minDifficulty\":5,\"moneyAvailable\":2542963.8245559926,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-91955.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[128,119,34,87,120,112,139,167,150,36,57,26,143,121,157,111,137,66,23,186,49,102,138],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"56.2.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"zer0\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"zer0\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"zer0\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8.036,\"minDifficulty\":8,\"moneyAvailable\":32146117.083301708,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-744486-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,3],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"54.1.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"nectar-net\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"nectar-net\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"nectar-net\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20.368000000000006,\"minDifficulty\":7,\"moneyAvailable\":2857169.8389932723,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-939698.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[2,3],[1,8],[0,6],[0,8],[1,4],[0,2],[5,8],[2,4],[3,8],[5,6],[2,7]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"89.3.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"neo-net\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"neo-net\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"neo-net\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":14218914.791532869,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"9.2.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"silver-helix\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"silver-helix\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"silver-helix\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":563606277.9924636,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"10.6.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"hong-fang-tea\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"hong-fang-tea\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":13.387999999999998,\"minDifficulty\":5,\"moneyAvailable\":3070575.935443541,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"52.5.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"harakiri-sushi\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"harakiri-sushi\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":17383545.822887402,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"92.4.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"phantasy\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"phantasy\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"phantasy\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"18.8.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"max-hardware\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"max-hardware\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"max-hardware\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.251999999999999,\"minDifficulty\":5,\"moneyAvailable\":238523977.39542288,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"18.7.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"omega-net\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"omega-net\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"omega-net\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"computek\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":29,\"hackDifficulty\":10.016,\"minDifficulty\":10,\"moneyAvailable\":1198228590.053321,\"moneyMax\":1522304500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":35,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"91.5.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"crush-fitness\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"crush-fitness\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"crush-fitness\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":32.234000000000044,\"minDifficulty\":15,\"moneyAvailable\":55546303.831302196,\"moneyMax\":1212667550,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":253,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"93.5.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"iron-gym\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"iron-gym\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"iron-gym\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":12.479999999999999,\"minDifficulty\":10,\"moneyAvailable\":349336573.7568867,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-114221-NiteSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":890994528,\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"90.3.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"millenium-fitness\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"millenium-fitness\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"millenium-fitness\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":489,\"serverGrowth\":40,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"65.3.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"powerhouse-fitness\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"powerhouse-fitness\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1058,\"serverGrowth\":54,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"10.4.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"snap-fitness\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"snap-fitness\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"snap-fitness\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":722,\"serverGrowth\":50,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"31.1.9.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"run4theh111z\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"run4theh111z\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"run4theh111z\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":541,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"76.8.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"I.I.I.I\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"I.I.I.I\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"I.I.I.I\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":358,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-572181.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,8,8,9,9,-3,1,-4,-9,4,7],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"70.7.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"avmnite-02h\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"avmnite-02h\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"avmnite-02h\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":211,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-896541.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[140,62,96,123,180,16,193,159,25,171,174,40,54,138,189,100,144,64,60,120,40,93,133,52,22,74,196,136,31,38,175,94,199,24,96,127,90,99,45,29,60,33,98,81,170,8,71,150,9,81]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"20.5.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\".\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\".\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\".\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":547,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495261.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"25525498214\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"12.3.2.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"CSEC\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"CSEC\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"CSEC\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"35.3.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"84.9.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-560151.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[15,20],[12,19],[12,16],[3,10],[13,22],[20,30],[20,26]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"47.1.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"darkweb\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"darkweb\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"darkweb\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-0\",\"httpPortOpen\":false,\"ip\":\"7.6.6.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-0\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-0\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-0\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-1\",\"httpPortOpen\":false,\"ip\":\"15.3.5.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-1\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-1\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-1\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-2\",\"httpPortOpen\":false,\"ip\":\"47.7.2.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-2\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-2\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-2\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-3\",\"httpPortOpen\":false,\"ip\":\"28.4.6.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-3\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-3\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-3\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-4\",\"httpPortOpen\":false,\"ip\":\"10.9.6.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-4\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-4\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-4\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-5\",\"httpPortOpen\":false,\"ip\":\"91.4.1.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-5\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-5\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-5\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-6\",\"httpPortOpen\":false,\"ip\":\"87.6.5.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-6\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-6\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-6\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-7\",\"httpPortOpen\":false,\"ip\":\"88.7.4.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-7\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-7\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-7\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-8\",\"httpPortOpen\":false,\"ip\":\"87.2.5.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-8\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-8\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-8\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-9\",\"httpPortOpen\":false,\"ip\":\"44.4.4.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-9\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-9\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-9\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-10\",\"httpPortOpen\":false,\"ip\":\"55.7.8.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-10\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-10\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-10\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-11\",\"httpPortOpen\":false,\"ip\":\"90.2.7.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-11\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-11\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-11\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-12\",\"httpPortOpen\":false,\"ip\":\"89.9.6.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-12\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-12\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-12\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-13\",\"httpPortOpen\":false,\"ip\":\"21.6.2.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-13\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-13\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-13\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-14\",\"httpPortOpen\":false,\"ip\":\"19.2.1.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-14\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-14\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-14\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-15\",\"httpPortOpen\":false,\"ip\":\"32.2.0.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-15\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-15\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-15\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-16\",\"httpPortOpen\":false,\"ip\":\"45.7.9.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-16\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-16\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-16\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-17\",\"httpPortOpen\":false,\"ip\":\"11.0.2.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-17\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-17\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-17\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-18\",\"httpPortOpen\":false,\"ip\":\"2.3.4.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-18\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-18\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-18\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-19\",\"httpPortOpen\":false,\"ip\":\"90.0.7.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-19\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-19\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-19\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-20\",\"httpPortOpen\":false,\"ip\":\"19.9.1.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-20\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-20\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-20\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-21\",\"httpPortOpen\":false,\"ip\":\"60.9.1.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-21\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-21\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-21\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-22\",\"httpPortOpen\":false,\"ip\":\"12.5.0.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-22\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-22\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-22\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-23\",\"httpPortOpen\":false,\"ip\":\"48.0.5.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-23\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-23\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-23\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"botnet-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"botnet-24\",\"httpPortOpen\":false,\"ip\":\"81.4.8.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.grow(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2dyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_grow.js\",\"server\":\"botnet-24\"}}],[\"_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.hack(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2hhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUUsRUFBTTtJQUNoQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDbkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUU7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4gKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGN1cnJlbnRIb3N0ID0gbnMuYXJnc1swXSBhcyBzdHJpbmdcclxuICBjb25zdCB0YXJnZXQgPSBucy5hcmdzWzFdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_hack.js\",\"server\":\"botnet-24\"}}],[\"_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    const target = ns.args[1];\\r\\n    await ns.weaken(target);\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3dlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFFO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0BucydcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluIChuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBjdXJyZW50SG9zdCA9IG5zLmFyZ3NbMF0gYXMgc3RyaW5nXHJcbiAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1sxXSBhcyBzdHJpbmdcclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0KVxyXG4gIHdoaWxlICghbnMudHJ5V3JpdGVQb3J0KDEsICckJyArIGN1cnJlbnRIb3N0ICsgJzpkb25lJykpIHsgYXdhaXQgbnMuc2xlZXAoNSkgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"_weaken.js\",\"server\":\"botnet-24\"}}],[\"_share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentHost = ns.args[0];\\r\\n    await ns.share();\\r\\n    while (!ns.tryWritePort(1, '$' + currentHost + ':done')) {\\r\\n        await ns.sleep(5);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NoYXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL19zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFNO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBRTtBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbiAobnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY3VycmVudEhvc3QgPSBucy5hcmdzWzBdIGFzIHN0cmluZ1xyXG4gIGF3YWl0IG5zLnNoYXJlKClcclxuICB3aGlsZSAoIW5zLnRyeVdyaXRlUG9ydCgxLCAnJCcgKyBjdXJyZW50SG9zdCArICc6ZG9uZScpKSB7IGF3YWl0IG5zLnNsZWVwKDUpIH1cclxufVxyXG4iXX0=\",\"filename\":\"_share.js\",\"server\":\"botnet-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1.0232,\"discovery\":\"known\",\"playerReputation\":95127.79028894033}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":68.9061,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":7.5145,\"discovery\":\"known\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":59.5914,\"discovery\":\"known\",\"playerReputation\":17016.358011270884}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0.0272,\"discovery\":\"known\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":17.7535,\"discovery\":\"known\",\"playerReputation\":3476.8796371483313}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":3439.6849030520616,\"lastPrice\":3439.463097681323,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":false,\"otlkMag\":20.94654093246648,\"otlkMagForecast\":29.08315923895789,\"cap\":279494837,\"spreadPerc\":0.3,\"shareTxForMovement\":41992,\"shareTxUntilMovement\":41992,\"totalShares\":101800000,\"maxShares\":20400000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":19094.617257210626,\"lastPrice\":19093.4127215941,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":false,\"otlkMag\":21.545022358998118,\"otlkMagForecast\":29.83193759111039,\"cap\":704644423,\"spreadPerc\":0.3,\"shareTxForMovement\":40057,\"shareTxUntilMovement\":40057,\"totalShares\":74700000,\"maxShares\":14900000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":35581.54253598088,\"lastPrice\":35585.08419456105,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":12.795630762044173,\"otlkMagForecast\":35.027627388542285,\"cap\":152420006,\"spreadPerc\":0.2,\"shareTxForMovement\":48062,\"shareTxUntilMovement\":48062,\"totalShares\":96500000,\"maxShares\":19300000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":22212.154444580985,\"lastPrice\":22210.130549290225,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":12.831456614384987,\"otlkMagForecast\":62.26684571271504,\"cap\":38196603,\"spreadPerc\":0.5,\"shareTxForMovement\":37196,\"shareTxUntilMovement\":37196,\"totalShares\":67200000,\"maxShares\":13400000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":75744.91700840023,\"lastPrice\":75751.81925422413,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":13.618516047535515,\"otlkMagForecast\":37.945047801150864,\"cap\":530896492,\"spreadPerc\":0.1,\"shareTxForMovement\":74121,\"shareTxUntilMovement\":74121,\"totalShares\":43200000,\"maxShares\":8600000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":63518.017973264716,\"lastPrice\":63509.025474343434,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":true,\"otlkMag\":23.184594579835572,\"otlkMagForecast\":71.9851063179443,\"cap\":935811069,\"spreadPerc\":0.7,\"shareTxForMovement\":72893,\"shareTxUntilMovement\":72893,\"totalShares\":34400000,\"maxShares\":6900000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":5532.93028512952,\"lastPrice\":5533.589607324499,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":15.175889751676547,\"otlkMagForecast\":63.7475919809588,\"cap\":359368057,\"spreadPerc\":0.1,\"shareTxForMovement\":74864,\"shareTxUntilMovement\":74864,\"totalShares\":112800000,\"maxShares\":22600000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":51413.03451485705,\"lastPrice\":51421.683756998624,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":false,\"otlkMag\":10.711801767627758,\"otlkMagForecast\":36.30731193679845,\"cap\":451395853,\"spreadPerc\":0.4,\"shareTxForMovement\":36980,\"shareTxUntilMovement\":36980,\"totalShares\":59100000,\"maxShares\":11800000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":12999.637329495941,\"lastPrice\":13001.2775314225,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":false,\"otlkMag\":9.410861101598805,\"otlkMagForecast\":40.25652148651533,\"cap\":200236854,\"spreadPerc\":0.8,\"shareTxForMovement\":91381,\"shareTxUntilMovement\":91381,\"totalShares\":56900000,\"maxShares\":11400000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":2576.5105976318496,\"lastPrice\":2576.727321505956,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":7.680186355497146,\"otlkMagForecast\":40.84451344401392,\"cap\":116922846,\"spreadPerc\":0.6,\"shareTxForMovement\":65662,\"shareTxUntilMovement\":65662,\"totalShares\":147600000,\"maxShares\":29500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":13432.225994410996,\"lastPrice\":13431.190373606727,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":9.014436003281647,\"otlkMagForecast\":39.94491363150607,\"cap\":177979600,\"spreadPerc\":0.8,\"shareTxForMovement\":100695,\"shareTxUntilMovement\":100695,\"totalShares\":61100000,\"maxShares\":12200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":5544.374627627359,\"lastPrice\":5543.776188493265,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":7.275629917643949,\"otlkMagForecast\":56.89598131904549,\"cap\":99690265,\"spreadPerc\":0.7,\"shareTxForMovement\":70529,\"shareTxUntilMovement\":70529,\"totalShares\":86300000,\"maxShares\":17300000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":18509.960347708093,\"lastPrice\":18511.75086348077,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":8.56888224517279,\"otlkMagForecast\":58.09392968522711,\"cap\":477595030,\"spreadPerc\":0.7,\"shareTxForMovement\":100004,\"shareTxUntilMovement\":100004,\"totalShares\":38600000,\"maxShares\":7700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":7232.318270413889,\"lastPrice\":7231.77079832239,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":9.133542853552362,\"otlkMagForecast\":60.62678041437278,\"cap\":619113172,\"spreadPerc\":0.6,\"shareTxForMovement\":78217,\"shareTxUntilMovement\":78217,\"totalShares\":33400000,\"maxShares\":6700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":12872.383842022955,\"lastPrice\":12871.210954579563,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":5.540341630702866,\"otlkMagForecast\":55.141441349778276,\"cap\":114882222,\"spreadPerc\":0.6,\"shareTxForMovement\":117240,\"shareTxUntilMovement\":117240,\"totalShares\":40700000,\"maxShares\":8100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":10790.459497763613,\"lastPrice\":10791.473031743697,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":5.121958938972132,\"otlkMagForecast\":45.592435285478665,\"cap\":143641800,\"spreadPerc\":0.7,\"shareTxForMovement\":85751,\"shareTxUntilMovement\":85751,\"totalShares\":56200000,\"maxShares\":11200000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":70942.2327146275,\"lastPrice\":70949.79132600395,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":9.064814293826105,\"otlkMagForecast\":41.68742357517495,\"cap\":70866285,\"spreadPerc\":0.4,\"shareTxForMovement\":99317,\"shareTxUntilMovement\":99317,\"totalShares\":41700000,\"maxShares\":8300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":12378.294706288281,\"lastPrice\":12377.270940808814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":8.660171279024254,\"otlkMagForecast\":60.20731338824044,\"cap\":236937364,\"spreadPerc\":0.5,\"shareTxForMovement\":111175,\"shareTxUntilMovement\":111175,\"totalShares\":40300000,\"maxShares\":8100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":16573.630419224504,\"lastPrice\":16575.256863776445,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":2.7557568142370847,\"otlkMagForecast\":50.611807713347055,\"cap\":604607692,\"spreadPerc\":1.1,\"shareTxForMovement\":67524,\"shareTxUntilMovement\":67524,\"totalShares\":24100000,\"maxShares\":4800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":19275.227444103984,\"lastPrice\":19268.528230948454,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.48,\"b\":true,\"otlkMag\":6.285255474602943,\"otlkMagForecast\":54.5990976424982,\"cap\":119770433,\"spreadPerc\":0.6,\"shareTxForMovement\":32021,\"shareTxUntilMovement\":32021,\"totalShares\":60600000,\"maxShares\":12100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6217.9500420836675,\"lastPrice\":6219.109413106027,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.33,\"b\":false,\"otlkMag\":2.542908339347859,\"otlkMagForecast\":42.92873052192577,\"cap\":120344836,\"spreadPerc\":1.1,\"shareTxForMovement\":60170,\"shareTxUntilMovement\":60170,\"totalShares\":37600000,\"maxShares\":7500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3100.365634582239,\"lastPrice\":3100.656847938073,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":5.297352177181162,\"otlkMagForecast\":45.80721254628338,\"cap\":59515145,\"spreadPerc\":0.5,\"shareTxForMovement\":80418,\"shareTxUntilMovement\":80418,\"totalShares\":75600000,\"maxShares\":15100000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":20124.428521722228,\"lastPrice\":20118.90031999643,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.96,\"b\":true,\"otlkMag\":5.191928166081727,\"otlkMagForecast\":58.010053798550466,\"cap\":78516565,\"spreadPerc\":1.3,\"shareTxForMovement\":72848,\"shareTxUntilMovement\":72848,\"totalShares\":42800000,\"maxShares\":8600000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":20264.901606602303,\"lastPrice\":20260.101488829623,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.69,\"b\":true,\"otlkMag\":6.75798801315666,\"otlkMagForecast\":57.73167114717486,\"cap\":47659262,\"spreadPerc\":0.6,\"shareTxForMovement\":56505,\"shareTxUntilMovement\":56505,\"totalShares\":28300000,\"maxShares\":5700000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3643.3853598774704,\"lastPrice\":3643.8501641089574,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":true,\"otlkMag\":1.4856707709586232,\"otlkMagForecast\":51.56495861999639,\"cap\":75779389,\"spreadPerc\":0.7,\"shareTxForMovement\":115727,\"shareTxUntilMovement\":115727,\"totalShares\":54700000,\"maxShares\":10900000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":52091.35098611357,\"lastPrice\":52113.259375319336,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3,\"b\":true,\"otlkMag\":5.440533311694696,\"otlkMagForecast\":51.97196166958018,\"cap\":78049259,\"spreadPerc\":0.9,\"shareTxForMovement\":38969,\"shareTxUntilMovement\":38969,\"totalShares\":15100000,\"maxShares\":3000000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2995.3716521897745,\"lastPrice\":2995.7999782110455,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":7.8308986639237625,\"otlkMagForecast\":58.88933549389572,\"cap\":120716247,\"spreadPerc\":0.6,\"shareTxForMovement\":52130,\"shareTxUntilMovement\":52130,\"totalShares\":8800000,\"maxShares\":1800000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2670.7958743630934,\"lastPrice\":2671.0804369897214,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":5.311780531869503,\"otlkMagForecast\":45.69847923649869,\"cap\":17133928,\"spreadPerc\":0.9,\"shareTxForMovement\":162016,\"shareTxUntilMovement\":162016,\"totalShares\":12400000,\"maxShares\":2500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":899.7569785984216,\"lastPrice\":900.002949315402,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.95,\"b\":false,\"otlkMag\":13.288285180254817,\"otlkMagForecast\":39.09602247772,\"cap\":20218576,\"spreadPerc\":0.9,\"shareTxForMovement\":58996,\"shareTxUntilMovement\":58996,\"totalShares\":10900000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":88.93159228918857,\"lastPrice\":88.89819191794562,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.68,\"b\":true,\"otlkMag\":5.705278990283177,\"otlkMagForecast\":54.4209397780546,\"cap\":18294340,\"spreadPerc\":1.4,\"shareTxForMovement\":15694,\"shareTxUntilMovement\":15694,\"totalShares\":54600000,\"maxShares\":10900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1128.7515024694735,\"lastPrice\":1128.5616439438627,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":true,\"otlkMag\":12.168234025545019,\"otlkMagForecast\":62.93299644188752,\"cap\":1217480,\"spreadPerc\":1.4,\"shareTxForMovement\":33982,\"shareTxUntilMovement\":33982,\"totalShares\":99200000,\"maxShares\":19800000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":34686.015154213106,\"lastPrice\":34682.4171253007,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":8.600545049212958,\"otlkMagForecast\":59.22983264899653,\"cap\":271324709,\"spreadPerc\":0.9,\"shareTxForMovement\":185650,\"shareTxUntilMovement\":185650,\"totalShares\":14400000,\"maxShares\":2900000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":29589.655311202074,\"lastPrice\":29587.166578817007,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":13.63948620443181,\"otlkMagForecast\":63.06545314041657,\"cap\":355621420,\"spreadPerc\":0.9,\"shareTxForMovement\":146981,\"shareTxUntilMovement\":146981,\"totalShares\":25000000,\"maxShares\":5000000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":306304,\"lastUpdate\":1703983449436,\"ticksUntilCycle\":42}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"hh:mm:ss\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":100,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#28CF28\",\"primary\":\"#21A821\",\"primarydark\":\"#177317\",\"successlight\":\"#1CFF1C\",\"success\":\"#16CA16\",\"successdark\":\"#0D910D\",\"errorlight\":\"#FF3B3B\",\"error\":\"#C32D2D\",\"errordark\":\"#8E2121\",\"secondarylight\":\"#B3B3B3\",\"secondary\":\"#838383\",\"secondarydark\":\"#676767\",\"warninglight\":\"#FFFF3A\",\"warning\":\"#C3C32A\",\"warningdark\":\"#8C8C1E\",\"infolight\":\"#64CBFF\",\"info\":\"#3399CC\",\"infodark\":\"#246D91\",\"welllight\":\"#404040\",\"well\":\"#1C1C1C\",\"white\":\"#C3C3C3\",\"black\":\"#0A0B0B\",\"hp\":\"#C62E2E\",\"money\":\"#D6BB27\",\"hack\":\"#ADFF2F\",\"combat\":\"#E8EDCD\",\"cha\":\"#8B5FAF\",\"int\":\"#537CC8\",\"rep\":\"#E8EDCD\",\"disabled\":\"#5AB5A5\",\"backgroundprimary\":\"#0C0D0E\",\"backgroundsecondary\":\"#121415\",\"button\":\"#252829\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"000000\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"37","AllGangsSave":"","LastExportBonus":"1703983452536","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}